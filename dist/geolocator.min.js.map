{"version":3,"sources":["webpack://geolocator/webpack/universalModuleDefinition","webpack://geolocator/webpack/bootstrap","webpack://geolocator/./src/lib/utils.js","webpack://geolocator/./src/lib/fetch.js","webpack://geolocator/./src/core/enums.js","webpack://geolocator/./src/core/geo.error.js","webpack://geolocator/./src/core/geo.helper.js","webpack://geolocator/./src/core/geo.watcher.js","webpack://geolocator/./src/core/geolocator.js","webpack://geolocator/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_toString","toString","utils","noop","isString","isStringSet","trim","length","isNumber","isObject","type","_typeof","Boolean","isFunction","isArray","isFilledArray","array","isPlainObject","isDate","isElement","HTMLElement","nodeType","isNode","Node","isJQueryObject","jQuery","isPositionError","isError","Error","removeQuery","str","replace","removeProtocol","setProtocol","url","https","undefined","location","protocol","trimDots","encodeURI","encodeURIComponent","decodeURI","decodeURIComponent","String","randomString","len","Math","abs","random","slice","abbr","options","extend","upper","dots","match","join","toUpperCase","params","obj","keys","encode","operator","separator","include","exclude","inc","exc","forIn","key","indexOf","v","k","push","notateGlobalObj","notation","levels","split","shift","forEach","note","callback","destination","_len","arguments","sources","Array","_key","source","concat","Date","clone","own","cloned","mapToSchema","schema","mapped","safeJsonParse","JSON","parse","e","time","seconds","ts","now","parseInt","lib_utils","fetch_fetch","timeout","async","defer","clean","script","document","createElement","cbParamSet","callbackParam","cbFnName","rootNameSet","rootName","query","qMark","execCb","err","timeUp","clearTimeout","parentNode","removeChild","readyState","onreadystatechange","onload","onerror","error","errMsg","message","charset","crossorigin","src","getElementsByTagName","appendChild","setTimeout","xhr","isXDR","XMLHttpRequest","XDomainRequest","hasCallback","xError","crossDomain","status","method","data","withCredentials","mimeType","username","password","fetch","XHR_READY_STATE","DONE","ontimeout","open","headers","setRequestHeader","overrideMimeType","send","_xhr","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","lib_fetch","core_enums","freeze","URL","IP","FLAG","GOOGLE_MAPS_API","GOOGLE_MAPS_API_BASE","GOOGLE_SATATIC_MAP","GOOGLE_GEOLOCATION","GOOGLE_GEOCODE","GOOGLE_TIMEZONE","GOOGLE_DISTANCE_MATRIX","MapTypeId","HYBRID","ROADMAP","SATELLITE","TERRAIN","LocationType","ROOFTOP","RANGE_INTERPOLATED","GEOMETRIC_CENTER","APPROXIMATE","TravelMode","DRIVING","WALKING","BICYCLING","TRANSIT","UnitSystem","METRIC","IMPERIAL","RadioType","LTE","GSM","CDMA","WCDMA","DistanceFormula","HAVERSINE","PYTHAGOREAN","ImageFormat","PNG","PNG_8","PNG_32","GIF","JPG","JPG_BASELINE","geo_error_GeoError","GeoError","code","Code","UNKNOWN_ERROR","geo_error_classCallCheck","this","writable","captureStackTrace","constructor","stack","msg","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","geo_error_typeof","isValidErrorCode","response","INVALID_RESPONSE","errCode","errorCodeFromStatus","error_message","errorMessage","reason","errors","INVALID_REQUEST","DAILY_LIMIT_EXCEEDED","GOOGLE_KEY_INVALID","USER_RATE_LIMIT_EXCEEDED","NOT_FOUND","PARSE_ERROR","errorCodeFromReason","errorCode","prop","setPrototypeOf","create","GEOLOCATION_NOT_SUPPORTED","INVALID_GEO_IP_SOURCE","INVALID_PARAMETERS","REQUEST_DENIED","REQUEST_FAILED","GOOGLE_API_FAILED","OVER_QUERY_LIMIT","MAX_ELEMENTS_EXCEEDED","MAX_DIMENSIONS_EXCEEDED","MAX_WAYPOINTS_EXCEEDED","INTERNAL_ERROR","geo_error","geoHelper","toGoogleCoords","coords","lat","latitude","lng","longitude","fromGoogleCoords","toPointList","arr","map","getGeocodeComps","comp","route","locality","administrative_area","administrativeArea","postal_code","postalCode","country","region","buildGeocodeParams","reverse","placeId","address","geoComps","b","bounds","southwestLat","southwestLng","northeastLat","northeastLng","language","formatGeocodeResults","results","formattedAddress","comps","address_components","types","long_name","short_name","geometry","commonName","point_of_interest","premise","subpremise","colloquial_area","streetNumber","street_number","street","administrative_area_level_4","administrative_area_level_3","neighborhood","administrative_area_level_5","town","sublocality","administrative_area_level_2","city","administrative_area_level_1","state","stateCode","administrative_area_level_1_s","countryCode","country_s","formatted_address","location_type","place_id","timestamp","geocode","conf","opts","coordsSet","google","raw","xhrOpts","responseText","gErr","fromResponse","formatDistanceResults","origins","originAddresses","dests","destinationAddresses","rows","origin","oIndex","dest","dIndex","elements","from","to","distance","duration","fare","mapStylesToParams","styles","result","a","style","stylers","featureType","elementType","val","propName","propVal","geo_helper","geo_watcher","GeoWatcher","onChange","onError","_this","geo_watcher_classCallCheck","isCleared","cycle","_timer","id","navigator","geolocation","watchPosition","pos","clearOnError","clear","clearWatch","delay","_this2","cb","_clear","defaultConfig","version","geolocator_geolocator","geolocator","_","config","center","getStaticMap","mapTypeId","size","width","height","scale","zoom","marker","format","color","getStyles","element","title","elem","getElementById","isGoogleLoaded","maps","Map","getDiv","ensureGoogleLoaded","mapData","_geolocatorMapData","instance","infoWindow","LatLng","mapOptions","setOptions","Marker","event","clearInstanceListeners","setMap","position","InfoWindow","setContent","addListener","configCreateMap","enableHighAccuracy","maximumWait","maximumAge","desiredAccuracy","onProgress","fallbackToIP","addressLookup","timezone","staticMap","checkGoogleKey","callbackMap","locateByIP","onPositionReceived","fetchAddressAndTimezone","onPositionError","isGeolocationSupported","loc","watcher","complete","watch","accuracy","locateAccurate","getCurrentPosition","homeMobileCountryCode","homeMobileNetworkCode","radioType","carrier","cellTowers","wifiAccessPoints","considerIp","Content-Type","stringify","post","getXHRResponse","isGeoError","geoIpSource","updateResponse","provider","setLocationURLs","Number","globalVar","jsonpOpts","jsonp","target","radius","unitSystem","calcDistance","formula","targetReached","reverseGeocode","timeZoneId","timeZoneName","dstOffset","rawOffset","destinations","invalidOriginOrDest","travelMode","avoidFerries","avoidHighways","avoidTolls","DistanceMatrixService","getDistanceMatrix","DistanceMatrixStatus","OK","dLat","degToRad","dLng","sin","cos","atan2","sqrt","latA","latB","lngA","x","y","ip","km","mi","degrees","PI","radians","dec","isLng","sign","nsew","absValue","round","floor","cc","flag","toLowerCase","getMapOpts","createMap","getTZ","getTimeZone","setGeoIPSource"],"mappings":"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","file":"geolocator.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"geolocator\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"geolocator\"] = factory();\n\telse\n\t\troot[\"geolocator\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","let _toString = Object.prototype.toString;\r\n\r\n/**\r\n * Simple utility methods; internally used within Geolocator core;\r\n * made publically accessible.\r\n * @type {Object}\r\n * @readonly\r\n */\r\nconst utils = {\r\n\r\n    noop() {},\r\n\r\n    // ---------------------------\r\n    // Validation\r\n    // ---------------------------\r\n\r\n    /**\r\n     * Checks if the type of the given value is `String`.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isString(value) {\r\n        return typeof value === 'string';\r\n    },\r\n\r\n    isStringSet(value) {\r\n        return typeof value === 'string' && value.trim().length > 0;\r\n    },\r\n\r\n    /**\r\n     * Checks if the type of the given value is `Number`.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber(value) {\r\n        return typeof value === 'number';\r\n    },\r\n\r\n    /**\r\n     * Checks if the type of the given value is an `Object` or `Function`.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isObject(value) {\r\n        let type = typeof value;\r\n        return Boolean(value) && (type === 'object' || type === 'function');\r\n    },\r\n\r\n    /**\r\n     * Checks if the type of the given value is `Function`.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isFunction(value) {\r\n        return typeof value === 'function';\r\n    },\r\n\r\n    /**\r\n     * Checks if the type of the given value is `Array`.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isArray(value) {\r\n        return Boolean(value) && _toString.call(value) === '[object Array]';\r\n    },\r\n\r\n    /**\r\n     * Checks if the given object is a non-empty `Array`.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} array - Object to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isFilledArray(array) {\r\n        return utils.isArray(array) && array.length > 0;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given value is a plain `Object`.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isPlainObject(value) {\r\n        return Boolean(value)\r\n            && typeof value === 'object'\r\n            && _toString.call(value) === '[object Object]';\r\n    },\r\n\r\n    /**\r\n     * Checks if the given value is a `Date`.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isDate(value) {\r\n        return Boolean(value) && _toString.call(value) === '[object Date]';\r\n    },\r\n\r\n    /**\r\n     * Checks if the given object is a DOM element.\r\n     * @memberof utils\r\n     *\r\n     * @param {Object} object - Object to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isElement(object) {\r\n        if (!object) return false;\r\n        return object instanceof HTMLElement\r\n            || (typeof object === 'object' && object.nodeType === 1);\r\n    },\r\n\r\n    /**\r\n     * Checks if the given object is a DOM node.\r\n     * @memberof utils\r\n     *\r\n     * @param {Object} object - Object to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isNode(object) {\r\n        if (!object) return false;\r\n        return object instanceof Node\r\n            || (typeof object === 'object' && typeof object.nodeType === 'number');\r\n    },\r\n\r\n    /**\r\n     * Checks if the given object is a jQuery instance.\r\n     * This will still return `false` if the jQuery instance has no items.\r\n     * @memberof utils\r\n     *\r\n     * @param {Object} object - Object to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isJQueryObject(object) {\r\n        if (!object) return false;\r\n        return ('jQuery' in window && object instanceof window.jQuery && Boolean(object[0]));\r\n            // http://api.jquery.com/jquery-2/\r\n            // || (typeof object === 'object' && Boolean(object.jquery));\r\n    },\r\n\r\n    /**\r\n     * Checks if the type of the given value is an HTML5 `PositionError`.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isPositionError(value) {\r\n        return Boolean(value) && _toString.call(value) === '[object PositionError]';\r\n    },\r\n\r\n    /**\r\n     * Checks if the given value is an instance of `Error` or HTML5 `PositionError`.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    isError(value) {\r\n        return (value instanceof Error) || utils.isPositionError(value);\r\n    },\r\n\r\n    // ---------------------------\r\n    // String\r\n    // ---------------------------\r\n\r\n    /**\r\n     * Removes the query string portion from the given URL string.\r\n     * @memberof utils\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {String} - Returns the rest of the string.\r\n     */\r\n    removeQuery(str) {\r\n        return str.replace(/\\?.*$/, '');\r\n    },\r\n\r\n    /**\r\n     * Removes the protocol portion from the given URL string.\r\n     * @memberof utils\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {String} - Returns the rest of the string.\r\n     */\r\n    removeProtocol(str) {\r\n        return str.replace(/^(.*:)?\\/\\//, '');\r\n    },\r\n\r\n    /**\r\n     * Sets the protocol of the given URL.\r\n     * @memberof utils\r\n     *\r\n     * @param {String} url\r\n     *        The URL to be modified.\r\n     * @param {Boolean} [https]\r\n     *        Specifies whether to set the protocol to HTTPS.\r\n     *        If omitted, current page protocol will be used.\r\n     *\r\n     * @returns {String} - The modified URL string.\r\n     */\r\n    setProtocol(url, https) {\r\n        let p;\r\n        if (https === undefined || https === null) {\r\n            p = window.location.protocol;\r\n        } else {\r\n            p = https ? 'https:' : 'http:';\r\n        }\r\n        url = utils.removeProtocol(url);\r\n        return `${p}//${url}`;\r\n    },\r\n\r\n    /**\r\n     * Removes both the leading and trailing dots from the given string.\r\n     * @memberof utils\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {String} - Returns the rest of the string.\r\n     */\r\n    trimDots(str) {\r\n        return str.replace(/^\\.+?(.*?)\\.+?$/g, '$1');\r\n    },\r\n\r\n    /**\r\n     * URL-Encodes the given string. Note that the encoding is done Google's\r\n     * way; that is, spaces are replaced with `+` instead of `%20`.\r\n     * @memberof utils\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {String} - Returns the encoded string.\r\n     */\r\n    encodeURI(str) {\r\n        return encodeURIComponent(str).replace(/%20/g, '+');\r\n    },\r\n\r\n    /**\r\n     * URL-Decodes the given string. This is the reverse of `utils.encodeURI()`;\r\n     * so pluses (`+`) are replaced with spaces.\r\n     * @memberof utils\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {String} - Returns the decoded string.\r\n     */\r\n    decodeURI(str) {\r\n        return decodeURIComponent(str.replace(/\\+/g, '%20'));\r\n    },\r\n\r\n    /**\r\n     * Converts the given value to string.\r\n     * `null` and `undefined` converts to empty string.\r\n     * If value is a function, it's native `toString()` method is used.\r\n     * Otherwise, value is coerced.\r\n     * @memberof utils\r\n     *\r\n     * @param {*} value - String to be converted.\r\n     * @returns {String} - Returns the result string.\r\n     */\r\n    toString(value) {\r\n        if (value === null || value === undefined) return '';\r\n        if (value.toString && utils.isFunction(value.toString)) {\r\n            return value.toString();\r\n        }\r\n        return String(value);\r\n    },\r\n\r\n    /**\r\n     * Generates a random string with the number of characters.\r\n     * @memberof utils\r\n     *\r\n     * @param {Number} [len=1] - Length of the string.\r\n     * @returns {String} - Returns a random string.\r\n     */\r\n    randomString(len) {\r\n        if (!len || !utils.isNumber(len)) len = 1;\r\n        len = -Math.abs(len);\r\n        return Math.random().toString(36).slice(len);\r\n    },\r\n\r\n    /**\r\n     * Gets the abbreviation of the given phrase.\r\n     * @memberof utils\r\n     *\r\n     * @param {String} str\r\n     *        String to abbreviate.\r\n     * @param {Object} [options]\r\n     *        Abbreviation options.\r\n     *     @param {Boolean} [options.upper=true]\r\n     *            Whether to convert to upper-case.\r\n     *     @param {Boolean} [options.dots=true]\r\n     *            Whether to add dots after each abbreviation.\r\n     *\r\n     * @returns {String} - Returns the abbreviation of the given phrase.\r\n     */\r\n    abbr(str, options) {\r\n        options = utils.extend({\r\n            upper: true,\r\n            dots: true\r\n        }, options);\r\n        let d = options.dots ? '.' : '',\r\n            s = str.match(/(\\b\\w)/gi).join(d) + d;\r\n        return options.upper ? s.toUpperCase() : s;\r\n    },\r\n\r\n    /**\r\n     * Builds URI parameters from the given object.\r\n     * Note: This does not iterate deep objects.\r\n     * @memberof utils\r\n     *\r\n     * @param {Object} obj - Object to be processed.\r\n     * @param {Object} options - Parameterize options.\r\n     *     @param {Boolean} [options.encode=true]\r\n     *            Whether to encode URI components.\r\n     *     @param {String} [options.operator=\"=\"]\r\n     *     @param {String} [options.separator=\"&\"]\r\n     *     @param {Array} [options.include]\r\n     *            Keys to be included in the output params. If defined,\r\n     *            `options.exclude` is ignored.\r\n     *     @param {Array} [options.exclude]\r\n     *            Keys to be excluded from the output params.\r\n     *\r\n     * @returns {String} - URI parameters string.\r\n     */\r\n    params(obj, options) {\r\n        if (!utils.isPlainObject(obj) || Object.keys(obj).length === 0) {\r\n            return '';\r\n        }\r\n\r\n        options = utils.extend({\r\n            encode: true,\r\n            operator: '=',\r\n            separator: '&',\r\n            include: undefined,\r\n            exclude: undefined\r\n        }, options);\r\n\r\n        let params = [],\r\n            inc = utils.isArray(options.include) ? options.include : null,\r\n            exc = !inc && utils.isArray(options.exclude) ? options.exclude : null;\r\n        utils.forIn(obj, (value, key) => {\r\n            if ((!inc || inc.indexOf(key) >= 0)\r\n                    && (!exc || exc.indexOf(key) < 0)) {\r\n                let v = utils.toString(value);\r\n                v = options.encode ? utils.encodeURI(v) : v;\r\n                let k = options.encode ? utils.encodeURI(key) : key;\r\n                params.push(k + options.operator + v);\r\n            }\r\n        });\r\n\r\n        return params.join(options.separator);\r\n    },\r\n\r\n    /**\r\n     * Gets the object from the given object notation string.\r\n     * @private\r\n     *\r\n     * @param {String} notation - Object notation.\r\n     * @returns {*} - Any existing object.\r\n     */\r\n    notateGlobalObj(notation) {\r\n        notation = utils.trimDots(notation);\r\n        let levels = notation.split('.'),\r\n            o = window;\r\n        if (levels[0] === 'window' || levels[0] === 'document') {\r\n            levels.shift();\r\n        }\r\n        levels.forEach(note => {\r\n            o = o[note];\r\n        });\r\n        return o;\r\n    },\r\n\r\n    // ---------------------------\r\n    // Object\r\n    // ---------------------------\r\n\r\n    /**\r\n     * Iterates over own properties of an object invoking a callback for each\r\n     * property.\r\n     * @memberof utils\r\n     *\r\n     * @param {Object} obj\r\n     *        Object to be processed.\r\n     * @param {Function} callback\r\n     *        Callback function with the following signature:\r\n     *        `function (value, key, object) { ... }`.\r\n     *        Explicitly returning `false` will exit the iteration early.\r\n     * @returns {void}\r\n     */\r\n    forIn(obj, callback) {\r\n        let k;\r\n        for (k in obj) {\r\n            // if (obj.hasOwnProperty(k)) {} // Do this inside callback if needed.\r\n            if (callback(obj[k], k, obj) === false) break;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Extends the given object with the specified sources.\r\n     * Right most source overwrites the previous.\r\n     * NOTE: This is not a full implementation. Use with caution.\r\n     * @memberof utils\r\n     *\r\n     * @param {Object} destination\r\n     *        Destionation Object that will be extended and holds the default\r\n     *        values.\r\n     * @param {...Object} sources\r\n     *        Source objects to be merged.\r\n     *\r\n     * @returns {Object} - Returns the extended object.\r\n     */\r\n    extend(destination, ...sources) {\r\n        if (!utils.isObject(destination)) return {};\r\n        let key, value;\r\n        sources.forEach(source => {\r\n            for (key in source) { // eslint-disable-line\r\n                value = source[key];\r\n                if (utils.isArray(value)) {\r\n                    destination[key] = value.concat();\r\n                } else if (utils.isDate(value)) {\r\n                    destination[key] = new Date(value);\r\n                } else if (utils.isFunction(value)) { // should be before object\r\n                    destination[key] = value;\r\n                } else if (utils.isObject(value)) {\r\n                    destination[key] = utils.extend({}, value);\r\n                } else {\r\n                    destination[key] = value;\r\n                }\r\n            }\r\n        });\r\n        return destination;\r\n    },\r\n\r\n    /**\r\n     * Clones the given object.\r\n     * NOTE: This is not a full implementation. Use with caution.\r\n     * @memberof utils\r\n     *\r\n     * @param {Object} obj\r\n     *        Target Object to be cloned.\r\n     * @param {Object|Array} [options]\r\n     *        Clone options or array of keys to be cloned.\r\n     *     @param {Array} [options.keys]\r\n     *            Keys of the properties to be cloned.\r\n     *     @param {Boolean} [options.own=true]\r\n     *            Whether to clone own properties only. This is only effective\r\n     *            if `keys` is not defined.\r\n     *\r\n     * @returns {Object} - Returns the cloned object.\r\n     */\r\n    clone(obj, options) {\r\n        if (!obj) return {};\r\n\r\n        if (utils.isArray(options)) {\r\n            options = { keys: options };\r\n        }\r\n        options = utils.extend({\r\n            keys: null,\r\n            own: true\r\n        }, options);\r\n\r\n        let include,\r\n            cloned = {};\r\n\r\n        utils.forIn(obj, (value, key) => {\r\n            include = options.keys\r\n                ? options.keys.indexOf(key) >= 0\r\n                : (options.own && obj.hasOwnProperty(key)) || !options.own;\r\n            if (include) {\r\n                if (utils.isObject(value)) {\r\n                    cloned[key] = utils.clone(value, options);\r\n                } else {\r\n                    cloned[key] = value;\r\n                }\r\n            }\r\n        });\r\n        return cloned;\r\n    },\r\n\r\n    /**\r\n     *  Maps the values of the given object to a schema to re-structure a new\r\n     *  object.\r\n     *  @memberof utils\r\n     *\r\n     *  @param {Object} obj\r\n     *         Original object to be mapped.\r\n     *  @param {Object} schema\r\n     *         Schema to be used to map the object.\r\n     *\r\n     *  @returns {Object} - Mapped object.\r\n     */\r\n    mapToSchema(obj, schema) {\r\n        let mapped = {};\r\n        utils.forIn(schema, (value, key) => {\r\n            if (utils.isPlainObject(value)) {\r\n                mapped[key] = utils.mapToSchema(obj, value);\r\n            } else {\r\n                mapped[key] = obj[value];\r\n            }\r\n        });\r\n        return mapped;\r\n    },\r\n\r\n    // ---------------------------\r\n    // Misc\r\n    // ---------------------------\r\n\r\n    /**\r\n     * Safely parses the given JSON `String` into an `Object`.\r\n     * The only difference from `JSON.parse()` is that this method does not\r\n     * throw for invalid input. Instead, returns `null`.\r\n     * @memberof utils\r\n     *\r\n     * @param {String} str - JSON string to be parsed\r\n     * @returns {Object|null} - Returns the parsed `Object` or `null` if the\r\n     * input is invalid.\r\n     */\r\n    safeJsonParse(str) {\r\n        let o = null;\r\n        try {\r\n            o = JSON.parse(str);\r\n        } catch (e) {}\r\n        return o;\r\n    },\r\n\r\n    /**\r\n     * Gets a timestamp that is seconds or milliseconds since midnight,\r\n     * January 1, 1970 UTC.\r\n     * @memberof utils\r\n     *\r\n     * @param {Boolean} [seconds=false]\r\n     *        Specifies whether seconds should be returned instead of\r\n     *        milliseconds.\r\n     *\r\n     * @returns {Number} - Returns seconds or milliseconds since midnight,\r\n     * January 1, 1970 UTC.\r\n     */\r\n    time(seconds) {\r\n        let ts = Date.now();\r\n        return seconds ? parseInt(ts / 1000, 10) : ts;\r\n    }\r\n\r\n};\r\n\r\nexport default utils;\r\n","import utils from './utils';\r\n\r\n/**\r\n * Utility for making `XMLHttpRequest` and `JSONP` requests.\r\n * @copyright 2019, Onur Yıldırım <onur@cutepilot.com>\r\n */\r\nclass fetch {\r\n\r\n    // https://html.spec.whatwg.org/multipage/scripting.html#script\r\n\r\n    /**\r\n     * Makes a JSONP (GET) request by injecting a script tag in the browser.\r\n     * Note that using JSONP has some security implications. As JSONP is really\r\n     * javascript, it can do everything else javascript can do, so you need to\r\n     * trust the provider of the JSONP data.\r\n     * @see https://en.wikipedia.org/wiki/JSONP\r\n     * @memberof fetch\r\n     *\r\n     * @param {Object|String} options - Required. Either the URL string which\r\n     *     will set other options to defaults or an options object with the\r\n     *     following properties.\r\n     *     @param {String} options.url\r\n     *            Source URL to be called.\r\n     *     @param {String} [options.type]\r\n     *            The MIME type that identifies the scripting language of the\r\n     *            code referenced within the script element.\r\n     *            e.g. `\"text/javascript\"`\r\n     *     @param {String} [options.charset]\r\n     *            Indicates the character encoding of the external resource.\r\n     *            e.g. `\"utf-8\"`.\r\n     *     @param {Boolean} [options.async=true]\r\n     *            Indicates whether or not to perform the operation\r\n     *            asynchronously. See {@link http://caniuse.com/#feat=script-async|browser support}.\r\n     *     @param {Boolean} [options.defer=false]\r\n     *            Indicates whether the script should be executed when the page\r\n     *            has finished parsing. See {@link http://caniuse.com/#feat=script-defer|browser support}.\r\n     *     @param {String} [options.crossorigin]\r\n     *            Indicates the CORS setting for the script element being\r\n     *            injected. Note that this attribute is not widely supported.\r\n     *            Valid values: `\"anonymous\"`, `\"use-credentials\"`.\r\n     *            See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes|CORS settings}.\r\n     *     @param {Number} [options.timeout=0]\r\n     *            The number of milliseconds a request can take before\r\n     *            automatically being terminated. `0` disables timeout.\r\n     *     @param {Boolean} [options.clean=false]\r\n     *            Whether to remove the loaded script from DOM when the\r\n     *            operation ends. Note that the initial source might load\r\n     *            additional sources which are not deteceted or removed. Only\r\n     *            the initial source is removed.\r\n     *     @param {Object} [options.params]\r\n     *            Optional query parameters to be appended at the end of the URL.\r\n     *            e.g. `{ key: \"MY-KEY\" }`\r\n     *            You can also include the JSONP callback name parameter here\r\n     *            but if you want the object to be passed to the callback\r\n     *            argument of this method, use `options.callbackParam` to set\r\n     *            the callback parameter.\r\n     *     @param {String} [options.callbackParam]\r\n     *            If the endpoint supports JSONP callbacks, you can set the\r\n     *            callback parameter with this setting. This will enable a\r\n     *            second `obj` argument in the callback of this method which is\r\n     *            useful if the JSONP source invokes the callback with an\r\n     *            argument.\r\n     *     @param {String} [options.rootName]\r\n     *            The name (or notation) of the object that the generated JSONP\r\n     *            callback function should be assigned to. By default, this is\r\n     *            the `window` object but you can set this to a custom object\r\n     *            notation; for example, to prevent global namespace polution.\r\n     *            Note that this root object has to be globally accessible for\r\n     *            this to work. e.g. `\"window.myObject\"` (as string)\r\n     * @param {Function} [callback]\r\n     *        The callback function that will be executed when the script is\r\n     *        loaded. This callback has the following signature:\r\n     *        `function (err, obj) { ... }`. Note that the second argument\r\n     *        `obj` will always be `undefined` if the source endpoint does not\r\n     *        support JSONP callbacks or a callback param is not set explicitly\r\n     *        via `options.callbackParam` (or if the source does not invoke the\r\n     *        jsonp with an argument). However, the function will always execute\r\n     *        when the script loads or an error occurs.\r\n     *\r\n     * @returns {void}\r\n     *\r\n     * @example\r\n     * var opts1 = {\r\n     * \t   url: 'some/api',\r\n     * \t   callbackParam: 'jsonCallback',\r\n     * \t   params: { key: 'MY-KEY' }\r\n     * };\r\n     * // This will load the following source:\r\n     * // some/api?jsonCallback={auto-generated-fn-name}&key=MY-KEY\r\n     * fetch.jsonp(opts1, function (err, obj) {\r\n     * \t   console.log(obj); // some object\r\n     * });\r\n     *\r\n     * var opts2 = {\r\n     * \t   url: 'some/api',\r\n     * \t   params: {\r\n     * \t\t   key: 'MY-KEY',\r\n     * \t\t   jsonCallback: 'my-fn-name'\r\n     * \t   }\r\n     * };\r\n     * // This will load the following source:\r\n     * // some/api?jsonCallback=my-fn-name&key=MY-KEY\r\n     * fetch.jsonp(options, function (err, obj) {\r\n     * \t   console.log(obj); // undefined\r\n     * \t   // still executes, catch errors here\r\n     * });\r\n     * // JSON callback should be explicitly set.\r\n     * window['my-fn-name'] = function (obj) {\r\n     * \t   console.log(obj); // some object\r\n     * };\r\n     */\r\n    static jsonp(options, callback) {\r\n        let timeout;\r\n\r\n        callback = utils.isFunction(callback)\r\n            ? callback\r\n            : utils.noop;\r\n\r\n        if (utils.isString(options)) {\r\n            options = { url: options };\r\n        }\r\n\r\n        if (utils.isPlainObject(options)) {\r\n            options = utils.extend({\r\n                // type: undefined,\r\n                async: true,\r\n                defer: false,\r\n                // crossorigin: undefined,\r\n                timeout: 0,\r\n                params: {},\r\n                // callbackParam: undefined,\r\n                // rootName: undefined,\r\n                clean: true\r\n            }, options);\r\n        } else {\r\n            return callback(new Error('No options or target URL is provided.'));\r\n        }\r\n\r\n        if (utils.isString(options.url) === false || options.url.trim() === '') {\r\n            return callback(new Error('No target URL is provided.'));\r\n        }\r\n\r\n        let script = document.createElement('script'),\r\n            cbParamSet = utils.isString(options.callbackParam)\r\n                && options.callbackParam.trim() !== '',\r\n            cbFnName,\r\n            root,\r\n            rootNameSet = utils.isString(options.rootName)\r\n                && options.rootName !== 'window'\r\n                && options.rootName !== 'document'\r\n                && options.rootName.trim() !== '';\r\n\r\n        if (cbParamSet) {\r\n            cbFnName = '_jsonp_' + utils.randomString(10);\r\n            options.params[options.callbackParam] = rootNameSet\r\n                ? `${options.rootName}.${cbFnName}`\r\n                : cbFnName;\r\n        }\r\n        let query = utils.params(options.params) || '',\r\n            qMark = options.url.indexOf('?') >= 0 ? '&' : '?',\r\n            url = query ? `${options.url}${qMark}${query}` : options.url;\r\n        // console.log(url);\r\n\r\n        function execCb(err, timeUp, obj) {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n                timeout = null;\r\n            }\r\n            if ((timeUp || options.clean) && script.parentNode) {\r\n                script.parentNode.removeChild(script);\r\n            }\r\n            // delete the jsonp callback function\r\n            if (rootNameSet) {\r\n                delete root[cbFnName];\r\n            }\r\n            callback(err, obj);\r\n        }\r\n\r\n        if (cbFnName) {\r\n            let fn = obj => {\r\n                execCb(null, false, obj);\r\n            };\r\n            root = rootNameSet\r\n                // ? window[options.rootName][cbFnName] = fn;\r\n                ? utils.notateGlobalObj(options.rootName) // if rootName is dot-notation.\r\n                : window;\r\n            root[cbFnName] = fn;\r\n        } else if (script.readyState) { // IE < 11\r\n            script.onreadystatechange = () => {\r\n                if (script.readyState === 'loaded'\r\n                        || script.readyState === 'complete') {\r\n                    script.onreadystatechange = null;\r\n                    execCb(null);\r\n                }\r\n            };\r\n        } else { // IE 11+\r\n            script.onload = () => {\r\n                execCb(null);\r\n            };\r\n        }\r\n\r\n        script.onerror = error => {\r\n            let errMsg = 'Could not load source at ' + utils.removeQuery(options.url);\r\n            if (error) {\r\n                errMsg += '\\n' + (error.message || error);\r\n            }\r\n            execCb(new Error(errMsg));\r\n        };\r\n\r\n        if (options.type) {\r\n            script.type = options.type;\r\n        }\r\n        if (options.charset) {\r\n            script.charset = options.charset;\r\n        }\r\n        if (options.async) {\r\n            script.async = true;\r\n        }\r\n        if (options.defer) {\r\n            script.defer = true;\r\n        }\r\n        if (options.crossorigin) {\r\n            script.crossorigin = options.crossorigin;\r\n        }\r\n\r\n        script.src = url;\r\n        document.getElementsByTagName('head')[0].appendChild(script);\r\n\r\n        // Timeout\r\n        if (utils.isNumber(options.timeout) && options.timeout > 0) {\r\n            timeout = setTimeout(() => {\r\n                script.src = '';\r\n                execCb(new Error('Operation timed out.'), true);\r\n            }, options.timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes an XMLHttpRequest with the given parameters.\r\n     * Note that `\"Access-Control-Allow-Origin\"` header should be present on\r\n     * the requested resource. Otherwise, the request will not be allowed.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest|XMLHttpRequest}.\r\n     * @memberof fetch\r\n     *\r\n     * @param {Object|String} options\r\n     *        Either the URL string which will set other options to defaults or\r\n     *        the full options object.\r\n     *     @param {String} options.url\r\n     *            Target URL to be called.\r\n     *     @param {String} [options.method=\"GET\"]\r\n     *            HTTP method.\r\n     *     @param {*} [options.data]\r\n     *            Data to be sent with the request.\r\n     *     @param {Number} [options.timeout]\r\n     *            The number of milliseconds a request can take before\r\n     *            automatically being terminated. `0` disables timeout.\r\n     *     @param {Boolean} [options.withCredentials=false]\r\n     *            Indicates whether or not cross-site Access-Control requests\r\n     *            should be made using credentials such as cookies or\r\n     *            authorization headers.\r\n     *     @param {Boolean} [options.async=true]\r\n     *            Indicating whether or not to perform the operation\r\n     *            asynchronously. If this value is false, the `send()` method\r\n     *            does not return until the response is received. If `true`,\r\n     *            notification of a completed transaction is provided using\r\n     *            event listeners. This must be `true` if the multipart\r\n     *            attribute is `true`, or an exception will be thrown.\r\n     *     @param {String} [options.mimeType]\r\n     *            If set, overrides the MIME type returned by the server. This\r\n     *            may be used, for example, to force a stream to be treated and\r\n     *            parsed as `text/xml`, even if the server does not report it as\r\n     *            such.\r\n     *     @param {Object} [options.headers]\r\n     *            Sets the HTTP request headers. Each key should be a header\r\n     *            name with a value. e.g. `{ 'Content-Length': 50 }`. For\r\n     *            security reasons, some headers cannot be set and can only be\r\n     *            controlled by the user agent.\r\n     *     @param {String} [options.username=\"\"]\r\n     *            User name to use for authentication purposes.\r\n     *     @param {String} [options.password=\"\"]\r\n     *            Password to use for authentication purposes.\r\n     * @param {Function} [callback]\r\n     *        The callback function in the following signature:\r\n     *        `function (err, xhr) { ... }`\r\n     *        Note that `xhr` object is always passed regardless of an error.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    static xhr(options, callback) {\r\n        let xhr, err;\r\n        let isXDR = false;\r\n\r\n        if ('XMLHttpRequest' in window) {\r\n            xhr = new XMLHttpRequest();\r\n        } else if ('XDomainRequest' in window) { // IE9\r\n            xhr = new XDomainRequest();\r\n            isXDR = true;\r\n        } else {\r\n            throw new Error('XMLHttpRequest is not supported!');\r\n        }\r\n\r\n        let hasCallback = utils.isFunction(callback);\r\n        callback = hasCallback\r\n            ? callback\r\n            : utils.noop;\r\n\r\n        if (utils.isString(options)) options = { url: options };\r\n        if (utils.isPlainObject(options)) {\r\n            options = utils.extend({\r\n                method: 'GET',\r\n                data: undefined,\r\n                async: true,\r\n                timeout: 0, // no timeout\r\n                withCredentials: false,\r\n                mimeType: undefined,\r\n                username: '',\r\n                password: ''\r\n            }, options);\r\n        } else {\r\n            callback(new Error('No options or target URL is provided.'));\r\n        }\r\n\r\n        if (utils.isString(options.url) === false) {\r\n            callback(new Error('No target URL is provided.'));\r\n        }\r\n\r\n        options.username = String(options.username);\r\n        options.password = String(options.password);\r\n        options.method = options.method.toUpperCase();\r\n        if (options.method !== 'POST' && options.method !== 'PUT') {\r\n            options.data = undefined;\r\n        }\r\n        // console.log(JSON.stringify(options));\r\n\r\n        function xError() {\r\n            let crossDomain = xhr.status === 0\r\n                ? '. Make sure you have permission if this is a cross-domain request.'\r\n                : '';\r\n            err = new Error(`The request returned status: ${xhr.status}${crossDomain}`);\r\n            // console.log(xhr);\r\n            callback(err, xhr);\r\n        }\r\n\r\n        if (hasCallback) {\r\n            if (isXDR) { // IE9\r\n                xhr.onload = () => {\r\n                    callback(null, xhr);\r\n                };\r\n                xhr.onerror = xError;\r\n            } else {\r\n                xhr.onreadystatechange = () => {\r\n                    if (xhr.readyState === fetch.XHR_READY_STATE.DONE) {\r\n                        if (xhr.status === 200) {\r\n                            callback(null, xhr);\r\n                        } else {\r\n                            xError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n\r\n            if (utils.isNumber(options.timeout) && options.timeout > 0) {\r\n                xhr.timeout = options.timeout;\r\n                xhr.ontimeout = () => {\r\n                    // xhr.abort();\r\n                    err = new Error('The request had timed out.');\r\n                    callback(err, xhr);\r\n                };\r\n            }\r\n        }\r\n        // console.log(options);\r\n        xhr.open(options.method, options.url, options.async, options.username, options.password);\r\n\r\n        // if this is XDomainRequest, it doesn't support setting custom headers;\r\n        // or overriding the mime type.\r\n        if (!isXDR) {\r\n            if (utils.isPlainObject(options.headers)) {\r\n                // xhr.setRequestHeader() method should be called after open(), but\r\n                // before send().\r\n                Object.keys(options.headers).forEach(key => {\r\n                    let value = options.headers[key];\r\n                    xhr.setRequestHeader(key, value);\r\n                });\r\n            }\r\n\r\n            // xhr.overrideMimeType() method must be called before send().\r\n            if (options.mimeType) {\r\n                xhr.overrideMimeType(options.mimeType);\r\n            }\r\n        }\r\n\r\n        xhr.send(options.data);\r\n    }\r\n\r\n    /**\r\n     * Alias of `fetch.xhr()` with request method set to `\"GET\"` by default.\r\n     * @memberof fetch\r\n     *\r\n     * @param {Object} options\r\n     *        Either the URL string which will set other options to defaults or\r\n     *        the full options object. See `fetch.xhr()` method options for\r\n     *        details.\r\n     * @param {Function} [callback]\r\n     *        The callback function in the following signature:\r\n     *        `function (err, xhr) { ... }`\r\n     *        Note that `xhr` object is always passed regardless of an error.\r\n     * @returns {void}\r\n     */\r\n    static get(options, callback) {\r\n        return fetch.xhr(options, callback);\r\n    }\r\n\r\n    /**\r\n     * Alias of `fetch.xhr()` with request method set to `\"POST\"` by default.\r\n     * @memberof fetch\r\n     *\r\n     * @param {Object} options\r\n     *        Either the URL string which will set other options to defaults or\r\n     *        the full options object. See `fetch.xhr()` method options for\r\n     *        details.\r\n     * @param {Function} [callback]\r\n     *        The callback function in the following signature:\r\n     *        `function (err, xhr) { ... }`\r\n     *        Note that `xhr` object is always passed regardless of an error.\r\n     * @returns {void}\r\n     */\r\n    static post(options, callback) {\r\n        return _xhr('POST', options, callback);\r\n    }\r\n\r\n    /**\r\n     * Alias of `fetch.xhr()` with request method set to `\"PUT\"` by default.\r\n     * @memberof fetch\r\n     *\r\n     * @param {Object} options\r\n     *        Either the URL string which will set other options to defaults or\r\n     *        the full options object. See `fetch.xhr()` method options for\r\n     *        details.\r\n     * @param {Function} [callback]\r\n     *        The callback function in the following signature:\r\n     *        `function (err, xhr) { ... }`\r\n     *        Note that `xhr` object is always passed regardless of an error.\r\n     * @returns {void}\r\n     */\r\n    static put(options, callback) {\r\n        return _xhr('PUT', options, callback);\r\n    }\r\n\r\n    /**\r\n     * Alias of `fetch.xhr()` with request method set to `\"DELETE\"` by default.\r\n     * @memberof fetch\r\n     *\r\n     * @param {Object} options\r\n     *        Either the URL string which will set other options to defaults or\r\n     *        the full options object. See `fetch.xhr()` method options for\r\n     *        details.\r\n     * @param {Function} [callback]\r\n     *        The callback function in the following signature:\r\n     *        `function (err, xhr) { ... }`\r\n     *        Note that `xhr` object is always passed regardless of an error.\r\n     * @returns {void}\r\n     */\r\n    static delete(options, callback) {\r\n        return _xhr('DELETE', options, callback);\r\n    }\r\n}\r\n\r\n/**\r\n *  @private\r\n */\r\nfunction _xhr(method, options, callback) {\r\n    options = utils.isString(options)\r\n        ? { url: options }\r\n        : options || {};\r\n    options.method = method;\r\n    return fetch.xhr(options, callback);\r\n}\r\n\r\n/**\r\n * Enumerates `XMLHttpRequest` ready states.\r\n * Not to be confused with `script.readyState`.\r\n * @memberof fetch\r\n *\r\n * @enum {Number}\r\n */\r\nfetch.XHR_READY_STATE = {\r\n    /**\r\n     * `xhr.open()` has not been called yet.\r\n     * @type {Number}\r\n     */\r\n    UNSENT: 0,\r\n    /**\r\n     * `xhr.send()` has been called.\r\n     * @type {Number}\r\n     */\r\n    OPENED: 1,\r\n    /**\r\n     * `xhr.send()` has been called, and headers and status are available.\r\n     * @type {Number}\r\n     */\r\n    HEADERS_RECEIVED: 2,\r\n    /**\r\n     * Downloading; responseText holds partial data.\r\n     * @type {Number}\r\n     */\r\n    LOADING: 3,\r\n    /**\r\n     * The operation is complete.\r\n     * @type {Number}\r\n     */\r\n    DONE: 4\r\n};\r\n\r\nexport default fetch;\r\n","const GOOGLE_MAPS_API_BASE = '//maps.googleapis.com/maps/api';\r\n\r\n/**\r\n * This file only includes partial documentation about `geolocator` enumerations.\r\n * Note that these enumerations are mostly an aggregation of\r\n * {@link https://developers.google.com/maps/documentation/javascript|Google Maps API} constants.\r\n *\r\n * @private\r\n * @readonly\r\n */\r\nconst enums = Object.freeze({\r\n    /**\r\n     * Enumerates API endpoints used within Geolocator core.\r\n     *\r\n     * @enum {String}\r\n     * @readonly\r\n     * @private\r\n     */\r\n    URL: {\r\n        /**\r\n         *  Public IP retrieval (free) service.\r\n         *  @type {String}\r\n         *  @private\r\n         */\r\n        IP: '//api.ipify.org',\r\n        /**\r\n         *  Country SVG flags.\r\n         *  e.g. <url>/tr.svg for Turkey flag.\r\n         *  @type {String}\r\n         *  @private\r\n         */\r\n        FLAG: '//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/',\r\n        /**\r\n         * Google Maps API bootstrap endpoint that loads all of the main\r\n         * Javascript objects and symbols for use in the Maps API.\r\n         * Some Maps API features are also available in self-contained\r\n         * libraries which are not loaded unless you specifically request them.\r\n         * See {@link https://developers.google.com/maps/documentation/javascript/libraries|details}.\r\n         * @type {String}\r\n         * @private\r\n         */\r\n        GOOGLE_MAPS_API: GOOGLE_MAPS_API_BASE + '/js',\r\n        /**\r\n         * Google Maps API Static Map endpoint.\r\n         * @type {String}\r\n         * @private\r\n         */\r\n        GOOGLE_SATATIC_MAP: GOOGLE_MAPS_API_BASE + '/staticmap',\r\n        /**\r\n         * Google Geolocation API endpoint.\r\n         * @type {String}\r\n         * @private\r\n         */\r\n        GOOGLE_GEOLOCATION: '//www.googleapis.com/geolocation/v1/geolocate',\r\n        /**\r\n         * Google Geocode API endpoint.\r\n         * @type {String}\r\n         * @private\r\n         */\r\n        GOOGLE_GEOCODE: '//maps.googleapis.com/maps/api/geocode/json',\r\n        /**\r\n         * Google TimeZone API endpoint.\r\n         * @type {String}\r\n         * @private\r\n         */\r\n        GOOGLE_TIMEZONE: '//maps.googleapis.com/maps/api/timezone/json',\r\n        /**\r\n         * Google Distance Matrix API endpoint.\r\n         * @type {String}\r\n         * @private\r\n         */\r\n        GOOGLE_DISTANCE_MATRIX: '//maps.googleapis.com/maps/api/distancematrix/json'\r\n    },\r\n    /**\r\n     * Enumerates Google map types.\r\n     * @memberof! geolocator\r\n     *\r\n     * @enum {String}\r\n     * @readonly\r\n     */\r\n    MapTypeId: {\r\n        /**\r\n         * Map type that displays a transparent layer of major streets on\r\n         * satellite images.\r\n         * @type {String}\r\n         */\r\n        HYBRID: 'hybrid',\r\n        /**\r\n         * Map type that displays a normal street map.\r\n         * @type {String}\r\n         */\r\n        ROADMAP: 'roadmap',\r\n        /**\r\n         * Map type that displays satellite images.\r\n         * @type {String}\r\n         */\r\n        SATELLITE: 'satellite',\r\n        /**\r\n         * Map type displays maps with physical features such as terrain and\r\n         * vegetation.\r\n         * @type {String}\r\n         */\r\n        TERRAIN: 'terrain'\r\n    },\r\n    /**\r\n     * Enumerates Google location types.\r\n     * @memberof! geolocator\r\n     *\r\n     * @enum {String}\r\n     * @readonly\r\n     */\r\n    LocationType: {\r\n        /**\r\n         * Indicates that the returned result is a precise geocode for which\r\n         * we have location information accurate down to street address\r\n         * precision.\r\n         * @type {String}\r\n         */\r\n        ROOFTOP: 'ROOFTOP',\r\n        /**\r\n         * Indicates that the returned result reflects an approximation\r\n         * (usually on a road) interpolated between two precise points (such as\r\n         * intersections). Interpolated results are generally returned when\r\n         * rooftop geocodes are unavailable for a street address.\r\n         * @type {String}\r\n         */\r\n        RANGE_INTERPOLATED: 'RANGE_INTERPOLATED',\r\n        /**\r\n         * Indicates that the returned result is the geometric center of a\r\n         * result such as a polyline (for example, a street) or polygon\r\n         * (region).\r\n         * @type {String}\r\n         */\r\n        GEOMETRIC_CENTER: 'GEOMETRIC_CENTER',\r\n        /**\r\n         * Indicates that the returned result is approximate.\r\n         * @type {String}\r\n         */\r\n        APPROXIMATE: 'APPROXIMATE'\r\n    },\r\n    /**\r\n     * Enumerates Google travel modes.\r\n     * @memberof! geolocator\r\n     *\r\n     * @enum {String}\r\n     * @readonly\r\n     */\r\n    TravelMode: {\r\n        /**\r\n         * Indicates distance calculation using the road network.\r\n         * @type {String}\r\n         */\r\n        DRIVING: 'DRIVING',\r\n        /**\r\n         * Requests distance calculation for walking via pedestrian paths &\r\n         * sidewalks (where available).\r\n         * @type {String}\r\n         */\r\n        WALKING: 'WALKING',\r\n        /**\r\n         * Requests distance calculation for bicycling via bicycle paths &\r\n         * preferred streets (where available).\r\n         * @type {String}\r\n         */\r\n        BICYCLING: 'BICYCLING',\r\n        /**\r\n         * Requests distance calculation via public transit routes (where\r\n         * available). This value may only be specified if the request includes\r\n         * an API key or a Google Maps APIs Premium Plan client ID. If you set\r\n         * the mode to transit you can optionally specify either a\r\n         * `departureTime` or an `arrivalTime`. If neither time is specified,\r\n         * the `departureTime` defaults to now (that is, the departure time defaults\r\n         * to the current time). You can also optionally include a `transitMode`\r\n         * and/or a `transitRoutingPreference`.\r\n         * @type {String}\r\n         */\r\n        TRANSIT: 'TRANSIT'\r\n    },\r\n    // /**\r\n    //  * Enumerates Google route restrictions.\r\n    //  * @memberof! geolocator\r\n    //  *\r\n    //  * @enum {String}\r\n    //  * @readonly\r\n    //  */\r\n    // RouteRestriction: {\r\n    //     TOLLS: 'tolls',\r\n    //     HIGHWAYS: 'highways',\r\n    //     FERRIES: 'ferries',\r\n    //     INDOOR: 'indoor'\r\n    // },\r\n    /**\r\n     * Enumerates Google unit systems.\r\n     * @memberof! geolocator\r\n     *\r\n     * @enum {Number}\r\n     * @readonly\r\n     */\r\n    UnitSystem: {\r\n        /**\r\n         * Distances in kilometers and meters.\r\n         * @type {Number}\r\n         */\r\n        METRIC: 0,\r\n        /**\r\n         * Distances defined in miles and feet.\r\n         * @type {Number}\r\n         */\r\n        IMPERIAL: 1\r\n    },\r\n    /**\r\n     * Enumerates mobile radio types.\r\n     * @memberof! geolocator\r\n     *\r\n     * @enum {String}\r\n     * @readonly\r\n     */\r\n    RadioType: {\r\n        /**\r\n         * LTE (Long-Term Evolution) mobile radio type.\r\n         * @type {String}\r\n         */\r\n        LTE: 'lte',\r\n        /**\r\n         * GSM (Global System for Mobile Communications) mobile radio type.\r\n         * @type {String}\r\n         */\r\n        GSM: 'gsm',\r\n        /**\r\n         * CDMA (Code division multiple access) mobile radio access technology.\r\n         * @type {String}\r\n         */\r\n        CDMA: 'cdma',\r\n        /**\r\n         * Wideband CDMA mobile radio access technology.\r\n         * @type {String}\r\n         */\r\n        WCDMA: 'wcdma'\r\n    },\r\n    /**\r\n     * Enumerates formulas/algorithms for calculating the distance between two\r\n     * lat/lng points.\r\n     * @memberof! geolocator\r\n     *\r\n     * @readonly\r\n     * @enum {String}\r\n     *\r\n     * @todo {@link https://en.wikipedia.org/wiki/Vincenty%27s_formulae|Vincenty's Formula}\r\n     */\r\n    DistanceFormula: {\r\n        /**\r\n         * Haversine formula for calculating the distance between two lat/lng points\r\n         * by relating the sides and angles of spherical triangles.\r\n         * @see {@link http://en.wikipedia.org/wiki/Haversine_formula|Haversine_formula}.\r\n         * @type {String}\r\n         */\r\n        HAVERSINE: 'haversine',\r\n        /**\r\n         * Formula based on the Pythagoras Theorem for calculating the\r\n         * distance between two lat/lng points on a Equirectangular projection\r\n         * to account for curvature of the longitude lines.\r\n         * @see {@link https://en.wikipedia.org/wiki/Pythagorean_theorem|Pythagorean_theorem}\r\n         * @type {String}\r\n         */\r\n        PYTHAGOREAN: 'pythagorean'\r\n    },\r\n    /**\r\n     *  Enumerates the image formats used for getting static Google Map images.\r\n     *  @memberof! geolocator\r\n     *\r\n     *  @readonly\r\n     *  @enum {String}\r\n     */\r\n    ImageFormat: {\r\n        /**\r\n         *  Specifies the PNG image format.\r\n         *  Same as `PNG_8`.\r\n         *  @type {String}\r\n         */\r\n        PNG: 'png',\r\n        /**\r\n         *  Specifies the 8-bit PNG image format.\r\n         *  Same as `PNG`.\r\n         *  @type {String}\r\n         */\r\n        PNG_8: 'png8',\r\n        /**\r\n         *  Specifies the 32-bit PNG image format.\r\n         *  @type {String}\r\n         */\r\n        PNG_32: 'png32',\r\n        /**\r\n         *  Specifies the GIF image format.\r\n         *  @type {String}\r\n         */\r\n        GIF: 'gif',\r\n        /**\r\n         *  Specifies the JPEG compressed image format.\r\n         *  @type {String}\r\n         */\r\n        JPG: 'jpg',\r\n        /**\r\n         *  Specifies a non-progressive JPEG compression image format.\r\n         *  @type {String}\r\n         */\r\n        JPG_BASELINE: 'jpg-baseline'\r\n    }\r\n});\r\n\r\nexport default enums;\r\n","import utils from '../lib/utils';\r\n\r\n/**\r\n * Geolocator Error class that provides a common type of error object for the\r\n * various APIs implemented in Geolocator. All callbacks of Geolocator will\r\n * include an instance of this object as the first argument; if the\r\n * corresponding operation fails. Also all thrown errors will be an instance of\r\n * this object.\r\n *\r\n * This object can be publicly accessed via `geolocator.Error`.\r\n *\r\n * @extends Error\r\n */\r\nclass GeoError { // extends Error (doesn't work with transpilers)\r\n\r\n    /**\r\n     * Costructs a new instance of `GeoError`.\r\n     *\r\n     * @param {String} [code=\"UNKNOWN_ERROR\"]\r\n     *        Any valid Geolocator Error code.\r\n     *        See {@link #GeoError.Code|`GeoError.Code` enumeration} for\r\n     *        possible values.\r\n     * @param {String} [message]\r\n     *        Error message. If omitted, this will be set to `code`.\r\n     *\r\n     * @returns {GeoError}\r\n     *\r\n     * @example\r\n     * var GeoError = geolocator.Error,\r\n     *     error = new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\r\n     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\r\n     * console.log(error instanceof GeoError); // true\r\n     */\r\n    constructor(code = GeoError.Code.UNKNOWN_ERROR, message) {\r\n        message = message || String(code);\r\n\r\n        /**\r\n         *  Gets the name of the Error object.\r\n         *  This always returns `\"GeoError\"`.\r\n         *  @name GeoError#name\r\n         *  @type {String}\r\n         */\r\n        Object.defineProperty(this, 'name', {\r\n            enumerable: false,\r\n            writable: false,\r\n            value: 'GeoError' // this.constructor.name\r\n        });\r\n\r\n        /**\r\n         *  Gets the error code set for this instance.\r\n         *  This will return one of\r\n         *  {@link #GeoError.Code|`GeoError.Code` enumeration}.\r\n         *  @name GeoError#code\r\n         *  @type {String}\r\n         */\r\n        Object.defineProperty(this, 'code', {\r\n            enumerable: false,\r\n            writable: true,\r\n            value: code\r\n        });\r\n\r\n        /**\r\n         *  Gets the error message set for this instance.\r\n         *  If no message is set, this will return the error code value.\r\n         *  @name GeoError#message\r\n         *  @type {String}\r\n         */\r\n        Object.defineProperty(this, 'message', {\r\n            enumerable: false,\r\n            writable: true,\r\n            value: message\r\n        });\r\n\r\n        if (Error.hasOwnProperty('captureStackTrace')) { // V8\r\n            Error.captureStackTrace(this, this.constructor);\r\n        } else {\r\n            /**\r\n             *  Gets the error stack for this instance.\r\n             *  @name GeoError#stack\r\n             *  @type {String}\r\n             */\r\n            Object.defineProperty(this, 'stack', {\r\n                enumerable: false,\r\n                writable: false,\r\n                value: (new Error(message)).stack\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of `GeoError` from the given value.\r\n     *\r\n     * @param {*} [err]\r\n     *        Value to be transformed. This is used to determine the proper\r\n     *        error code for the created instance. If an `Error` or `Object` is\r\n     *        passed, its `message` property is checked if it matches any of the\r\n     *        valid error codes. If omitted or no match is found, error code\r\n     *        `GeoError.Code.UNKNOWN_ERROR` will be used as default.\r\n     *\r\n     * @returns {GeoError}\r\n     *\r\n     * @example\r\n     * var GeoError = geolocator.Error,\r\n     * \t   error = GeoError.create();\r\n     * console.log(error.code); // \"UNKNOWN_ERROR\"\r\n     * error = GeoError.create(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\r\n     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\r\n     */\r\n    static create(err) {\r\n        if (err instanceof GeoError) {\r\n            return err;\r\n        }\r\n\r\n        let code, msg;\r\n\r\n        if (utils.isPositionError(err) && err.code) {\r\n            switch (err.code) {\r\n                case 1:\r\n                    code = GeoError.Code.PERMISSION_DENIED;\r\n                    break;\r\n                case 2:\r\n                    code = GeoError.Code.POSITION_UNAVAILABLE;\r\n                    break;\r\n                case 3:\r\n                    code = GeoError.Code.TIMEOUT;\r\n                    break;\r\n                default:\r\n                    code = GeoError.Code.UNKNOWN_ERROR;\r\n                    break;\r\n            }\r\n            return new GeoError(code, err.message || '');\r\n        }\r\n\r\n        if (typeof err === 'string') {\r\n            code = msg = err;\r\n        } else if (typeof err === 'object') {\r\n            code = err.code || err.message;\r\n            msg = err.message || err.code;\r\n        }\r\n        if (code && GeoError.isValidErrorCode(code)) {\r\n            return new GeoError(code, msg);\r\n        }\r\n\r\n        return new GeoError(GeoError.Code.UNKNOWN_ERROR, msg);\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of `GeoError` from the given response object.\r\n     * Since Geolocator implements various Google APIs, we might receive\r\n     * responses if different structures. For example, some APIs return a\r\n     * response object with a `status:String` property (such as the TimeZone\r\n     * API) and some return responses with an `error:Object` property. This\r\n     * method will determine the correct reason or message and return a\r\n     * consistent error object.\r\n     *\r\n     * @param {Object|String} response\r\n     *        Response (Object) or status (String) to be transformed.\r\n     * @param {String} [message=null]\r\n     *        Error message.\r\n     *\r\n     * @returns {GeoError}\r\n     *          `GeoError` instance if response contains an error. Otherwise,\r\n     *          returns `null`.\r\n     *\r\n     * @example\r\n     * var error = geolocator.Error.fromResponse(googleResponse);\r\n     * console.log(error.code); // \"GOOGLE_KEY_INVALID\"\r\n     */\r\n    static fromResponse(response, message = '') {\r\n        // example Google Geolocation API response:\r\n        // https://developers.google.com/maps/documentation/geolocation/intro#errors\r\n        // {\r\n        //      \"error\": {\r\n        //          \"errors\": [\r\n        //              {\r\n        //                  \"domain\": \"global\",\r\n        //                  \"reason\": \"parseError\",\r\n        //                  \"message\": \"Parse Error\",\r\n        //              }\r\n        //          ],\r\n        //      \"code\": 400,\r\n        //      \"message\": \"Parse Error\"\r\n        //      }\r\n        // }\r\n        // example Google TimeZone API response:\r\n        // {\r\n        //     \"status\": \"REQUEST_DENIED\"\r\n        // }\r\n\r\n        if (!response) return new GeoError(GeoError.Code.INVALID_RESPONSE);\r\n\r\n        let errCode;\r\n\r\n        if (utils.isString(response)) {\r\n            errCode = errorCodeFromStatus(response);\r\n            if (errCode) return new GeoError(errCode, message || response);\r\n        }\r\n\r\n        if (!utils.isObject(response)) return null;\r\n\r\n        let errMsg = response.error_message\r\n            || response.errorMessage\r\n            || ((response.error && response.error.message) || '')\r\n            || '';\r\n\r\n        if (response.status) {\r\n            errCode = errorCodeFromStatus(response.status);\r\n            if (errCode) return new GeoError(errCode, errMsg || message || response.status);\r\n        }\r\n\r\n        if (response.error) {\r\n            let reason = response.reason || response.error.reason;\r\n            if (!reason) {\r\n                let errors = response.error.errors;\r\n                if (utils.isArray(errors) && errors.length > 0) {\r\n                    reason = errors[0].reason; // get the first reason only\r\n                    errMsg = errMsg || errors[0].message; // update errMsg\r\n                }\r\n            }\r\n            errCode = errorCodeFromReason(reason) || GeoError.Code.UNKNOWN_ERROR;\r\n            return new GeoError(errCode, errMsg || reason || message);\r\n        }\r\n\r\n        if (errMsg) {\r\n            errCode = errorCodeFromStatus(errMsg) || GeoError.Code.UNKNOWN_ERROR;\r\n            return new GeoError(errCode, errMsg || message);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *  Checks whether the given value is an instance of `GeoError`.\r\n     *\r\n     *  @param {*} err - Object to be checked.\r\n     *\r\n     *  @returns {Boolean}\r\n     */\r\n    static isGeoError(err) {\r\n        return err instanceof GeoError;\r\n    }\r\n\r\n    /**\r\n     *  Checks whether the given value is a valid Geolocator Error code.\r\n     *\r\n     *  @param {String} errorCode - Error code to be checked.\r\n     *\r\n     *  @returns {Boolean}\r\n     */\r\n    static isValidErrorCode(errorCode) {\r\n        let prop;\r\n        for (prop in GeoError.Code) {\r\n            if (GeoError.Code.hasOwnProperty(prop)\r\n                    && errorCode === GeoError.Code[prop]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n *  Gets the string representation of the error instance.\r\n *\r\n *  @returns {String}\r\n */\r\nGeoError.prototype.toString = function () {\r\n    var msg = this.code !== this.message ? ` (${this.message})` : '';\r\n    return `${this.name}: ${this.code}${msg}`;\r\n};\r\n\r\n// `class x extends Error` doesn't work when using an ES6 transpiler, such as\r\n// Babel, since subclasses must extend a class. With Babel 6, we need\r\n// transform-builtin-extend plugin for this to work. So we're extending from\r\n// Error the old way. Now, `err instanceof Error` also returns `true`.\r\nif (typeof Object.setPrototypeOf === 'function') {\r\n    Object.setPrototypeOf(GeoError.prototype, Error.prototype);\r\n} else {\r\n    GeoError.prototype = Object.create(Error.prototype);\r\n}\r\n\r\n// ---------------------------\r\n// ERROR CODES\r\n// ---------------------------\r\n\r\n/**\r\n *  Enumerates Geolocator error codes.\r\n *  This enumeration combines Google API status (error) codes, HTML5 Geolocation\r\n *  position error codes and other Geolocator-specific error codes.\r\n *  @enum {String}\r\n */\r\nGeoError.Code = {\r\n    /**\r\n     *  Indicates that HTML5 Geolocation API is not supported by the browser.\r\n     *  @type {String}\r\n     */\r\n    GEOLOCATION_NOT_SUPPORTED: 'GEOLOCATION_NOT_SUPPORTED',\r\n    /**\r\n     *  Indicates that Geolocation-IP source is not set or invalid.\r\n     *  @type {String}\r\n     */\r\n    INVALID_GEO_IP_SOURCE: 'INVALID_GEO_IP_SOURCE',\r\n    /**\r\n     *  The acquisition of the geolocation information failed because the\r\n     *  page didn't have the permission to do it.\r\n     *  @type {String}\r\n     */\r\n    PERMISSION_DENIED: 'PERMISSION_DENIED',\r\n    /**\r\n     *  The acquisition of the geolocation failed because at least one\r\n     *  internal source of position returned an internal error.\r\n     *  @type {String}\r\n     */\r\n    POSITION_UNAVAILABLE: 'POSITION_UNAVAILABLE',\r\n    /**\r\n     *  The time allowed to acquire the geolocation, defined by\r\n     *  PositionOptions.timeout information was reached before\r\n     *  the information was obtained.\r\n     *  @type {String}\r\n     */\r\n    TIMEOUT: 'TIMEOUT',\r\n    /**\r\n     * Indicates that the request had one or more invalid parameters.\r\n     * @type {String}\r\n     */\r\n    INVALID_PARAMETERS: 'INVALID_PARAMETERS',\r\n    /**\r\n     * Indicates that the service returned invalid response.\r\n     * @type {String}\r\n     */\r\n    INVALID_RESPONSE: 'INVALID_RESPONSE',\r\n    /**\r\n     * Generally indicates that the query (address, components or latlng)\r\n     * is missing.\r\n     * @type {String}\r\n     */\r\n    INVALID_REQUEST: 'INVALID_REQUEST',\r\n    /**\r\n     * Indicates that the request was denied by the service.\r\n     * This will generally occur because of a missing API key or because the request\r\n     * is sent over HTTP instead of HTTPS.\r\n     * @type {String}\r\n     */\r\n    REQUEST_DENIED: 'REQUEST_DENIED',\r\n    /**\r\n     * Indicates that the request has failed.\r\n     * This will generally occur because of an XHR error.\r\n     * @type {String}\r\n     */\r\n    REQUEST_FAILED: 'REQUEST_FAILED',\r\n    /**\r\n     * Indicates that Google API could not be loaded.\r\n     * @type {String}\r\n     */\r\n    GOOGLE_API_FAILED: 'GOOGLE_API_FAILED',\r\n    /**\r\n     * Indicates that you are over your Google API quota.\r\n     * @type {String}\r\n     */\r\n    OVER_QUERY_LIMIT: 'OVER_QUERY_LIMIT',\r\n    /**\r\n     * Indicates that you've exceeded the requests per second per user limit that\r\n     * you configured in the Google Developers Console. This limit should be\r\n     * configured to prevent a single or small group of users from exhausting your\r\n     * daily quota, while still allowing reasonable access to all users.\r\n     * @type {String}\r\n     */\r\n    USER_RATE_LIMIT_EXCEEDED: 'USER_RATE_LIMIT_EXCEEDED',\r\n    /**\r\n     * Indicates that you've exceeded your daily limit for Google API(s).\r\n     * @type {String}\r\n     */\r\n    DAILY_LIMIT_EXCEEDED: 'DAILY_LIMIT_EXCEEDED',\r\n    /**\r\n     * Indicates that your Google API key is not valid. Please ensure that you've\r\n     * included the entire key, and that you've either purchased the API or have\r\n     * enabled billing and activated the API to obtain the free quota.\r\n     * @type {String}\r\n     */\r\n    GOOGLE_KEY_INVALID: 'GOOGLE_KEY_INVALID',\r\n    /**\r\n     * Indicates that maximum number of elements limit is exceeded. For\r\n     * example, for the Distance Matrix API; occurs when the product of\r\n     * origins and destinations exceeds the per-query limit.\r\n     * @type {String}\r\n     */\r\n    MAX_ELEMENTS_EXCEEDED: 'MAX_ELEMENTS_EXCEEDED',\r\n    /**\r\n     * Indicates that the request contained more than 25 origins,\r\n     * or more than 25 destinations.\r\n     * @type {String}\r\n     */\r\n    MAX_DIMENSIONS_EXCEEDED: 'MAX_DIMENSIONS_EXCEEDED',\r\n    /**\r\n     * Indicates that the request contained more than allowed waypoints.\r\n     * @type {String}\r\n     */\r\n    MAX_WAYPOINTS_EXCEEDED: 'MAX_WAYPOINTS_EXCEEDED',\r\n    /**\r\n     * Indicates that the request body is not valid JSON.\r\n     * @type {String}\r\n     */\r\n    PARSE_ERROR: 'PARSE_ERROR',\r\n    /**\r\n     * Indicates that the requested resource could not be found.\r\n     * Note that this also covers `ZERO_RESULTS`.\r\n     * @type {String}\r\n     */\r\n    NOT_FOUND: 'NOT_FOUND',\r\n    /**\r\n     * Indicates that an internal error (such as XHR cross-domain, etc) has occured.\r\n     * @type {String}\r\n     */\r\n    INTERNAL_ERROR: 'INTERNAL_ERROR',\r\n    /**\r\n     * Indicates that an unknown error has occured.\r\n     * @type {String}\r\n     */\r\n    UNKNOWN_ERROR: 'UNKNOWN_ERROR'\r\n};\r\n\r\n// ---------------------------\r\n// HELPER METHODS\r\n// ---------------------------\r\n\r\n/**\r\n *  @private\r\n */\r\nfunction errorCodeFromStatus(status) {\r\n    if (!status) return GeoError.Code.INVALID_RESPONSE;\r\n    if (status === 'OK') return null;\r\n    if (status === 'ZERO_RESULTS') return GeoError.Code.NOT_FOUND;\r\n    if (GeoError.Code.hasOwnProperty(status)) return status;\r\n    return null;\r\n}\r\n\r\n/**\r\n *  Gets `GeoError.Code` from the given response error reason.\r\n *  @private\r\n *\r\n *  @param {String} reason\r\n *         Google response error reason.\r\n *\r\n *  @returns {String}\r\n */\r\nfunction errorCodeFromReason(reason) {\r\n    switch (reason) {\r\n        case 'invalid':\r\n            return GeoError.Code.INVALID_REQUEST;\r\n        case 'dailyLimitExceeded':\r\n            return GeoError.Code.DAILY_LIMIT_EXCEEDED;\r\n        case 'keyInvalid':\r\n            return GeoError.Code.GOOGLE_KEY_INVALID;\r\n        case 'userRateLimitExceeded':\r\n            return GeoError.Code.USER_RATE_LIMIT_EXCEEDED;\r\n        case 'notFound':\r\n            return GeoError.Code.NOT_FOUND;\r\n        case 'parseError':\r\n            return GeoError.Code.PARSE_ERROR;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n// ---------------------------\r\n// EXPORT\r\n// ---------------------------\r\n\r\nexport default GeoError;\r\n","import utils from '../lib/utils';\r\nimport fetch from '../lib/fetch';\r\nimport enums from './enums';\r\nimport GeoError from './geo.error';\r\n\r\n/**\r\n *  Helper methods.\r\n *  @type {Object}\r\n *  @private\r\n */\r\nconst geoHelper = {\r\n\r\n    toGoogleCoords(coords) {\r\n        return {\r\n            lat: coords.lat || coords.latitude,\r\n            lng: coords.lng || coords.longitude\r\n        };\r\n    },\r\n\r\n    fromGoogleCoords(coords) {\r\n        return {\r\n            latitude: coords.latitude || coords.lat,\r\n            longitude: coords.longitude || coords.lng\r\n        };\r\n    },\r\n\r\n    // used for distance matrix origins and destinations\r\n    toPointList(arr) {\r\n        arr = utils.isArray(arr) ? arr : [arr];\r\n        return arr.map(o => {\r\n            return utils.isString(o) ? o : geoHelper.toGoogleCoords(o);\r\n        });\r\n    },\r\n\r\n    getGeocodeComps(comp) {\r\n        return {\r\n            route: comp.route,\r\n            locality: comp.locality,\r\n            administrative_area: comp.administrativeArea, // eslint-disable-line camelcase\r\n            postal_code: comp.postalCode, // eslint-disable-line camelcase\r\n            country: comp.country,\r\n            region: comp.region\r\n        };\r\n    },\r\n\r\n    // Geocode examples:\r\n    // address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=API_KEY\r\n    // address=Winnetka&bounds=34.172684,-118.604794|34.236144,-118.500938&key=API_KEY\r\n    // address=santa+cruz&components=country:ES&key=API_KEY\r\n    // components=administrative_area:TX|country:US&key=API_KEY\r\n    // Reverse Geocode examples:\r\n    // latlng=40.714224,-73.961452&key=API_KEY\r\n    // place_id=ChIJd8BlQ2BZwokRAFUEcm_qrcA&key=API_KEY\r\n    buildGeocodeParams(options, reverse) {\r\n        let params = [],\r\n            e = utils.encodeURI;\r\n\r\n        if (reverse) {\r\n            if (options.placeId) {\r\n                params.push(`place_id=${options.placeId}`);\r\n            } else if (options.latitude && options.longitude) {\r\n                params.push(`latlng=${options.latitude},${options.longitude}`);\r\n            }\r\n        } else {\r\n            if (options.address) {\r\n                params.push(`address=${e(options.address)}`);\r\n            }\r\n\r\n            let geoComps = geoHelper.getGeocodeComps(options);\r\n            geoComps = utils.params(geoComps, { operator: ':', separator: '|' });\r\n            params.push(`components=${geoComps}`);\r\n\r\n            let b = options.bounds;\r\n            if (utils.isArray(b) && b.length === 4) {\r\n                params.push(`bounds=${b[0]},${b[1]}|${b[2]},${b[3]}`);\r\n            } else if (utils.isPlainObject(b) && Object.keys(b).length === 4) {\r\n                params.push(`bounds=${b.southwestLat},${b.southwestLng}|${b.northeastLat},${b.northeastLng}`);\r\n            }\r\n        }\r\n\r\n        params.push(`language=${options.language}`);\r\n        params.push(`key=${options.key}`);\r\n        return params.join('&');\r\n    },\r\n\r\n    // See https://developers.google.com/maps/documentation/geocoding/intro\r\n    formatGeocodeResults(results) {\r\n        if (!utils.isArray(results) || results.length <= 0) {\r\n            return {\r\n                location: null,\r\n                address: null,\r\n                formattedAddress: '',\r\n                type: null, // locationType\r\n                placeId: ''\r\n            };\r\n        }\r\n\r\n        let i, c,\r\n            o = {},\r\n            data = results[0],\r\n            comps = data.address_components;\r\n\r\n        for (i = 0; i < comps.length; i += 1) {\r\n            c = comps[i];\r\n            if (c.types && c.types.length > 0) {\r\n                o[c.types[0]] = c.long_name;\r\n                o[c.types[0] + '_s'] = c.short_name;\r\n            }\r\n        }\r\n\r\n        let geometry = data.geometry;\r\n        return {\r\n            coords: geometry && geometry.location ? {\r\n                latitude: geometry.location.lat,\r\n                longitude: geometry.location.lng\r\n            } : null,\r\n            address: {\r\n                commonName: o.point_of_interest\r\n                    || o.premise\r\n                    || o.subpremise\r\n                    || o.colloquial_area\r\n                    || '',\r\n                streetNumber: o.street_number || '',\r\n                street: o.administrative_area_level_4\r\n                    || o.administrative_area_level_3\r\n                    || o.route\r\n                    || '',\r\n                route: o.route || '',\r\n                neighborhood: o.neighborhood\r\n                    || o.administrative_area_level_5\r\n                    || o.administrative_area_level_4\r\n                    || '',\r\n                town: o.sublocality || o.administrative_area_level_2 || '',\r\n                city: o.locality || o.administrative_area_level_1 || '',\r\n                region: o.administrative_area_level_2\r\n                    || o.administrative_area_level_1\r\n                    || '',\r\n                postalCode: o.postal_code || '',\r\n                state: o.administrative_area_level_1 || '',\r\n                stateCode: o.administrative_area_level_1_s || '',\r\n                country: o.country || '',\r\n                countryCode: o.country_s || ''\r\n            },\r\n            formattedAddress: data.formatted_address,\r\n            type: geometry.location_type || '',\r\n            placeId: data.place_id,\r\n            timestamp: utils.time()\r\n        };\r\n    },\r\n\r\n    geocode(reverse, conf, options, callback) {\r\n        let opts = {};\r\n        if (utils.isString(options)) {\r\n            opts = {};\r\n            let prop = reverse ? 'placeId' : 'address';\r\n            opts[prop] = options;\r\n        } else if (utils.isPlainObject(options)) {\r\n            opts = options;\r\n        } else {\r\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\r\n        }\r\n\r\n        if (reverse) {\r\n            let coordsSet = utils.isNumber(options.latitude)\r\n                && utils.isNumber(options.longitude);\r\n            if (!utils.isString(options.placeId) && !coordsSet) {\r\n                throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\r\n            }\r\n        }\r\n\r\n        opts = utils.extend({\r\n            key: conf.google.key || '',\r\n            language: conf.language || 'en',\r\n            raw: false\r\n        }, opts);\r\n\r\n        let query = geoHelper.buildGeocodeParams(opts, reverse),\r\n            url = utils.setProtocol(enums.URL.GOOGLE_GEOCODE, conf.https),\r\n            xhrOpts = {\r\n                url: `${url}?${query}`\r\n            };\r\n\r\n        fetch.xhr(xhrOpts, (err, xhr) => {\r\n            if (err) return callback(GeoError.create(err), null);\r\n\r\n            let response = utils.safeJsonParse(xhr.responseText),\r\n                gErr = GeoError.fromResponse(response);\r\n\r\n            if (gErr) return callback(gErr, null);\r\n\r\n            response = conf.raw\r\n                ? response\r\n                : geoHelper.formatGeocodeResults(response.results);\r\n            callback(null, response);\r\n        });\r\n    },\r\n\r\n    // See https://developers.google.com/maps/documentation/distance-matrix/intro\r\n    // Raw Result Example:\r\n    // {\r\n    //    \"destination_addresses\" : [ \"San Francisco, CA, USA\", \"Victoria, BC, Canada\" ],\r\n    //    \"origin_addresses\" : [ \"Vancouver, BC, Canada\", \"Seattle, WA, USA\" ],\r\n    //    \"rows\" : [\r\n    //       {\r\n    //          \"elements\" : [\r\n    //             {\r\n    //                \"distance\" : { \"text\" : \"1,704 km\", \"value\" : 1704324 },\r\n    //                \"duration\" : { \"text\" : \"3 days 19 hours\", \"value\" : 327061\r\n    //                },\r\n    //                \"status\" : \"OK\"\r\n    //             },\r\n    //             {\r\n    //                \"distance\" : { \"text\" : \"138 km\", \"value\" : 138295 },\r\n    //                \"duration\" : { \"text\" : \"6 hours 44 mins\", \"value\" : 24236 },\r\n    //                \"status\" : \"OK\"\r\n    //             }\r\n    //          ]\r\n    //       },\r\n    //       {\r\n    //          \"elements\" : [\r\n    //             {\r\n    //                \"distance\" : { \"text\" : \"1,452 km\", \"value\" : 1451623 },\r\n    //                \"duration\" : { \"text\" : \"3 days 4 hours\", \"value\" : 275062 },\r\n    //                \"status\" : \"OK\"\r\n    //             },\r\n    //             {\r\n    //                \"distance\" : { \"text\" : \"146 km\", \"value\" : 146496 },\r\n    //                \"duration\" : { \"text\" : \"2 hours 52 mins\", \"value\" : 10324 },\r\n    //                \"status\" : \"OK\"\r\n    //             }\r\n    //          ]\r\n    //       }\r\n    //    ],\r\n    //    \"status\" : \"OK\"\r\n    // }\r\n    // Formatted to:\r\n\r\n    formatDistanceResults(results) {\r\n        if (!utils.isPlainObject(results)) {\r\n            return null;\r\n        }\r\n\r\n        let arr = [],\r\n            origins = results.originAddresses,\r\n            dests = results.destinationAddresses,\r\n            rows = results.rows;\r\n\r\n        // [\r\n        //     {\r\n        //          from: 'Vancouver, BC, Canada',\r\n        //          to: 'San Francisco, CA, USA',\r\n        //          distance: { value: 1704107, text: \"1,704 km\" },\r\n        //          duration: { value: 327025, text: \"3 days 19 hours\" },\r\n        //          fare: { currency: \"USD\", value: 6, text: \"$6.00\" }\r\n        //     },\r\n        //     ...\r\n        // ]\r\n\r\n        let e;\r\n        origins.forEach((origin, oIndex) => {\r\n            dests.forEach((dest, dIndex) => {\r\n                e = rows[oIndex].elements[dIndex];\r\n                arr.push({\r\n                    from: origin,\r\n                    to: dest,\r\n                    distance: e.distance,\r\n                    duration: e.duration,\r\n                    fare: e.fare,\r\n                    timestamp: utils.time()\r\n                });\r\n            });\r\n        });\r\n\r\n        return arr;\r\n    },\r\n\r\n    // Converts a map-styles object in to static map styles (formatted query-string params).\r\n    // See https://developers.google.com/maps/documentation/static-maps/styling\r\n    mapStylesToParams(styles) {\r\n        if (!styles) return '';\r\n        if (!utils.isArray(styles)) styles = [styles];\r\n        let result = [];\r\n        styles.forEach((v, i, a) => {\r\n            let style = '';\r\n            if (v.stylers) { // only if there is a styler object\r\n                if (v.stylers.length > 0) { // Needs to have a style rule to be valid.\r\n                    style += (v.hasOwnProperty('featureType') ? 'feature:' + v.featureType : 'feature:all') + '|';\r\n                    style += (v.hasOwnProperty('elementType') ? 'element:' + v.elementType : 'element:all') + '|';\r\n                    v.stylers.forEach((val, i, a) => {\r\n                        let propName = Object.keys(val)[0],\r\n                            propVal = val[propName].toString().replace('#', '0x');\r\n                        style += propName + ':' + propVal + '|';\r\n                    });\r\n                }\r\n            }\r\n            result.push('style=' + encodeURIComponent(style));\r\n        });\r\n        return result.join('&');\r\n    }\r\n\r\n};\r\n\r\nexport default geoHelper;\r\n","import utils from '../lib/utils';\r\n\r\nclass GeoWatcher {\r\n\r\n    constructor(onChange, onError, options = {}) {\r\n        this.isCleared = false;\r\n        this.cycle = 0;\r\n        this._timer = null;\r\n        this.id = navigator.geolocation.watchPosition(\r\n            pos => {\r\n                this.cycle++;\r\n                if (utils.isFunction(onChange)) onChange(pos);\r\n            },\r\n            err => {\r\n                this.cycle++;\r\n                if (utils.isFunction(onError)) onError(err);\r\n                if (options.clearOnError) {\r\n                    this.clear();\r\n                }\r\n            },\r\n            options\r\n        );\r\n    }\r\n\r\n    _clear() {\r\n        navigator.geolocation.clearWatch(this.id);\r\n        this.isCleared = true;\r\n        this._timer = null;\r\n    }\r\n\r\n    clear(delay, callback) {\r\n        let d = utils.isNumber(delay) ? delay : 0,\r\n            cb = utils.isFunction(callback) ? callback\r\n                : utils.isFunction(delay) ? delay : null;\r\n        // clear any previous timeout\r\n        if (this._timer) {\r\n            clearTimeout(this._timer);\r\n            this._timer = null;\r\n        }\r\n        // check if watcher is not cleared\r\n        if (!this.isCleared) {\r\n            if (d === 0) {\r\n                this._clear();\r\n                if (cb) cb();\r\n                return;\r\n            }\r\n            this._timer = setTimeout(() => {\r\n                this._clear();\r\n                if (cb) cb();\r\n            }, d);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// ---------------------------\r\n// EXPORT\r\n// ---------------------------\r\n\r\nexport default GeoWatcher;\r\n","import utils from '../lib/utils';\r\nimport fetch from '../lib/fetch';\r\nimport geoHelper from './geo.helper';\r\nimport GeoError from './geo.error';\r\nimport GeoWatcher from './geo.watcher';\r\nimport enums from './enums';\r\n\r\n/**\r\n *  Radius of earth in kilometers.\r\n *  @private\r\n *  @type {Number}\r\n */\r\nconst EARTH_RADIUS_KM = 6371;\r\n\r\n/**\r\n *  Radius of earth in miles.\r\n *  @private\r\n *  @type {Number}\r\n */\r\nconst EARTH_RADIUS_MI = 3959;\r\n\r\n/**\r\n *  Storage for Geolocator default configuration.\r\n *\r\n *  @readonly\r\n *  @private\r\n */\r\nconst defaultConfig = {\r\n    language: 'en',\r\n    https: true,\r\n    google: {\r\n        version: '3', // latest 3.x\r\n        key: '',\r\n        styles: null\r\n    }\r\n};\r\n\r\n/**\r\n *  Geolocator library that provides methods for getting geo-location information,\r\n *  geocoding, address look-ups, distance & durations, timezone information and more...\r\n *  This library makes use of HTML5 position feautures, implements Google APIs\r\n *  and other services.\r\n *\r\n *  <b>Important Notes:</b>\r\n *\r\n *  Although some calls might work without a key, it is generally required by\r\n *  most {@link https://developers.google.com/maps/faq#using-google-maps-apis|Goolge APIs}\r\n *  (such as Time Zone API). To get a free (or premium) key,\r\n *  {@link https://developers.google.com/maps/documentation/javascript/|click here}.\r\n *  After getting a key, you can enable multiple APIs for it. Make sure you\r\n *  {@link https://console.developers.google.com|enable}\r\n *  all the APIs supported by Geolocator.\r\n *\r\n *  Note that browser API keys cannot have referer restrictions when used\r\n *  with some Google APIs.\r\n *\r\n *  Make sure your doctype is HTML5 and you're calling Geolocation APIs from an\r\n *  HTTPS page. Geolocation API is removed from unsecured origins in Chrome 50.\r\n *  Other browsers are expected to follow.\r\n *\r\n *  @license MIT\r\n *  @copyright 2019, Onur Yıldırım <onur@cutepilot.com>\r\n */\r\nclass geolocator {\r\n\r\n    // ---------------------------\r\n    // PROPERTIES\r\n    // ---------------------------\r\n\r\n    /**\r\n     *  Geolocator Error class that provides a common type of error object for\r\n     *  the various APIs implemented in Geolocator. All callbacks of Geolocator\r\n     *  will include an instance of this object as the first argument; if the\r\n     *  corresponding operation fails. Also all thrown errors will be an instance\r\n     *  of this object.\r\n     *\r\n     *  This object also enumerates\r\n     *  {@link ?api=geolocator-error#GeoError.Code|Geolocator Error codes}.\r\n     *\r\n     *  @see {@link ?api=geolocator-error|`GeoError` documentation}\r\n     *  @type {GeoError}\r\n     *  @readonly\r\n     */\r\n    static get Error() {\r\n        return GeoError;\r\n    }\r\n\r\n    /**\r\n     *  Documented separately in enums.js\r\n     *  @private\r\n     */\r\n    static get MapTypeId() {\r\n        return enums.MapTypeId;\r\n    }\r\n\r\n    /**\r\n     *  Documented separately in enums.js\r\n     *  @private\r\n     */\r\n    static get LocationType() {\r\n        return enums.LocationType;\r\n    }\r\n\r\n    /**\r\n     *  Documented separately in enums.js\r\n     *  @private\r\n     */\r\n    static get TravelMode() {\r\n        return enums.TravelMode;\r\n    }\r\n\r\n    /**\r\n     *  Documented separately in enums.js\r\n     *  @private\r\n     */\r\n    static get UnitSystem() {\r\n        return enums.UnitSystem;\r\n    }\r\n\r\n    /**\r\n     *  Documented separately in enums.js\r\n     *  @private\r\n     */\r\n    static get RadioType() {\r\n        return enums.RadioType;\r\n    }\r\n\r\n    /**\r\n     *  Documented separately in enums.js\r\n     *  @private\r\n     */\r\n    static get DistanceFormula() {\r\n        return enums.DistanceFormula;\r\n    }\r\n\r\n    /**\r\n     *  Documented separately in enums.js\r\n     *  @private\r\n     */\r\n    static get ImageFormat() {\r\n        return enums.ImageFormat;\r\n    }\r\n\r\n    // ---------------------------\r\n    // STATIC METHODS\r\n    // ---------------------------\r\n\r\n    /**\r\n     *  Sets or gets the geolocator configuration object.\r\n     *  Make sure you configure Geolocator before calling other methods that\r\n     *  require a Google API key.\r\n     *\r\n     *  @param {Object} [options]\r\n     *         Configuration object. If omitted, this method returns the current\r\n     *         configuration.\r\n     *      @param {String} [options.language=\"en\"]\r\n     *             Language to be used for API requests that supports language\r\n     *             configurations. This is generally used for Google APIs.\r\n     *             See {@link https://developers.google.com/maps/faq#languagesupport|supported languages}.\r\n     *      @param {Boolean} [options.https=true]\r\n     *             As Google recommends; using HTTPS encryption makes your site\r\n     *             more secure, and more resistant to snooping or tampering.\r\n     *             If set to `true`, the API calls are made over HTTPS, at all\r\n     *             times. Setting to `false` will switch to HTTP (even if the\r\n     *             page is on HTTPS). And if set to `null`, current protocol will\r\n     *             be used. Note that some APIs might not work with HTTP such as\r\n     *             Google Maps TimeZone API.\r\n     *      @param {Object} [options.google]\r\n     *             Google specific options.\r\n     *          @param {String} [options.google.version=\"3\"]\r\n     *                 Google Maps API version to be used (with\r\n     *                 `geolocator.createMap()`) method. The default version\r\n     *                 value is tested and works with Geolocator. You can set a\r\n     *                 greater value or the latest version number and it should\r\n     *                 work; but it's not guaranteed. Find out the\r\n     *                 {@link https://developers.google.com/maps/documentation/javascript/versions|latest version here}.\r\n     *          @param {String} [options.google.key=\"\"]\r\n     *                 API key to be used with Google API calls. Although some\r\n     *                 calls might work without a key, it is generally required\r\n     *                 by most Goolge APIs. To get a free (or premium) key,\r\n     *                 {@link https://developers.google.com/maps/documentation/javascript/|click here}.\r\n     *          @param {Array} [options.google.styles]\r\n     *                 An array of objects to customize the presentation of the\r\n     *                 Google base maps, changing the visual display of such\r\n     *                 elements as roads, parks, and built-up areas.\r\n     *                 See {@link https://developers.google.com/maps/documentation/javascript/styling|Styling Maps}.\r\n     *\r\n     *  @returns {Object} - Returns the current or updated configuration object.\r\n     *\r\n     *  @example\r\n     *  geolocator.config({\r\n     *      language: \"en\",\r\n     *      google: {\r\n     *          version: \"3\",\r\n     *          key: \"YOUR-GOOGLE-API-KEY\"\r\n     *      }\r\n     *  });\r\n     */\r\n    static config(options) {\r\n        if (options) {\r\n            geolocator._.config = utils.extend(defaultConfig, options);\r\n        }\r\n        return geolocator._.config;\r\n    }\r\n\r\n    /**\r\n     *  Gets a static map image URL which can be embeded via an `<img />` tag\r\n     *  on the page.\r\n     *\r\n     *  Note that, if `options.center` is set to an address (instead of\r\n     *  coordinates) and `options.marker` is also set; we will need to geocode\r\n     *  that address to get center coordinates for the marker.\r\n     *  In this case, you must use the `callback` parameter to get the async\r\n     *  result. Otherwise, this method will directly return a `String`.\r\n     *\r\n     *  Make sure you have enabled Static Maps API (and Geocoding API if\r\n     *  `marker` is enabled) in your Google Developers console.\r\n     *\r\n     *  For interactive map, see {@link #geolocator.createMap|`geolocator.createMap()` method}.\r\n     *\r\n     *  @see {@link https://developers.google.com/maps/documentation/static-maps/intro|Static Maps}\r\n     *  @see {@link https://developers.google.com/maps/documentation/static-maps/usage-limits|Usage Limits}\r\n     *\r\n     *  @param {Object} options\r\n     *         Static map options.\r\n     *         @param {String|Object} options.center\r\n     *                Defines the center of the map and the location.\r\n     *                Either an address `String` or an coordinates `Object` with\r\n     *                `latitude:Number` and `longitude:Number` properties.\r\n     *         @param {String} [options.mapTypeId=\"roadmap\"]\r\n     *                Type of the map to be created.\r\n     *                See {@link #geolocator.MapTypeId|`geolocator.MapTypeId` enumeration}\r\n     *                for possible values.\r\n     *         @param {String|Object} [options.size=\"600x300\"]\r\n     *                Defines the size (in pixels) of the returned image.\r\n     *                Either a string in `widthxheight` format or an Object\r\n     *                with `width:Number` and `height:Number` properties.\r\n     *         @param {Number} [options.scale=1]\r\n     *                Affects the number of pixels that are returned. scale=2\r\n     *                returns twice as many pixels as scale=1 while retaining\r\n     *                the same coverage area and level of detail (i.e. the\r\n     *                contents of the map don't change). Accepted values are 1,\r\n     *                2 and 4 (4 is only available to Google Maps APIs Premium\r\n     *                Plan customers.)\r\n     *         @param {Number} [options.zoom=9]\r\n     *                Zoom level to be set for the map.\r\n     *         @param {String} [options.format=png]\r\n     *                Defines the format of the resulting image.\r\n     *                See {@link #geolocator.ImageFormat|`geolocator.ImageFormat` enumeration}\r\n     *                for possible values.\r\n     *         @param {Boolean|String} [options.marker=true]\r\n     *                Specifies whether to add a marker to the center of the map.\r\n     *                You can define the color of the marker by passing a color\r\n     *                `String` instead of a `Boolean`. Color can be a predefined\r\n     *                color from the set `red` (default), `black`, `brown`,\r\n     *                `green`, `purple`, `yellow`, `blue`, `gray`, `orange` and\r\n     *                `white`; or a HEX 24-bit color (e.g. `\"0xFF0000\"`).\r\n     *                Note that marker will not be visible if `center` is set to\r\n     *                a `String` address and you don't use the callback.\r\n     *         @param {String} [options.region]\r\n     *                Defines the appropriate borders to display, based on\r\n     *                geo-political sensitivities. Accepts a region code\r\n     *                specified as a two-character ccTLD (top-level domain)\r\n     *                value. e.g. `\"us\"`.\r\n     *         @param {Array} [options.styles]\r\n     *                An array of objects to customize the presentation of the\r\n     *                Google base maps, changing the visual display of such\r\n     *                elements as roads, parks, and built-up areas.\r\n     *                This will default to the global styles set via\r\n     *                {@link #geolocator.config|`geolocator.config()` method}, if any.\r\n     *                See {@link https://developers.google.com/maps/documentation/javascript/styling|Styling Maps}.\r\n     *\r\n     *  @param {Function} [callback]\r\n     *         Callback function to be executed when the static map URL is built.\r\n     *         This takes 2 arguments: `function (err, url) { ... }`.\r\n     *         If omitted, this method will directly return the static map\r\n     *         image URL; but (if enabled) the marker will not be visible if\r\n     *         `options.center` is set to an address `String` instead of a\r\n     *         coordinates `Object`.\r\n     *\r\n     *  @returns {String|void}\r\n     *           If a callback is passed, this will return `void`.\r\n     *           Otherwise, a `String` that represents the URL of the static map.\r\n     *\r\n     *  @example\r\n     *  // Async example (with address and marker)\r\n     *  var options = {\r\n     *      center: \"Los Angles, CA, US\",\r\n     *      mapTypeId: geolocator.MapTypeId.ROADMAP,\r\n     *      size: \"600x300\",\r\n     *      scale: 1,\r\n     *      zoom: 5,\r\n     *      marker: \"0xFFCC00\",\r\n     *      format: geolocator.ImageFormat.PNG\r\n     *  };\r\n     *  geolocator.getStaticMap(options, function (err, url) {\r\n     *      if (!err) {\r\n     *          document.getElementById('my-img').src = url;\r\n     *      }\r\n     *  });\r\n     *\r\n     *  @example\r\n     *  // Sync example (with coordinates)\r\n     *  var options = {\r\n     *      center: {\r\n     *          longitude: 34.0522342,\r\n     *          latitude: -118.2436849\r\n     *      },\r\n     *      mapTypeId: geolocator.MapTypeId.ROADMAP,\r\n     *      size: \"600x300\",\r\n     *      scale: 1,\r\n     *      zoom: 5,\r\n     *      marker: \"0xFFCC00\",\r\n     *      format: geolocator.ImageFormat.PNG\r\n     *  };\r\n     *  document.getElementById('my-img').src = geolocator.getStaticMap(options);\r\n     */\r\n    static getStaticMap(options, callback) {\r\n        if (!utils.isPlainObject(options) || !options.center) {\r\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS,\r\n                'A center address or coordinates are required.');\r\n        }\r\n\r\n        if (utils.isString(options.center)) {\r\n            return geolocator.geocode(options.center, (err, location) => {\r\n                if (err) callback(err);\r\n                options.center = location.coords;\r\n                callback(null, geolocator.getStaticMap(options));\r\n            });\r\n        }\r\n\r\n        let conf = geolocator._.config;\r\n        let opts = utils.extend({\r\n            mapTypeId: enums.MapTypeId.ROADMAP,\r\n            size: {\r\n                width: 600,\r\n                height: 300\r\n            },\r\n            scale: 1, // 1 | 2 | (4 for business customers of google maps)\r\n            zoom: 9,\r\n            marker: 'red',\r\n            format: enums.ImageFormat.PNG,\r\n            language: conf.language || 'en',\r\n            region: null\r\n        }, options);\r\n\r\n        let center = utils.isPlainObject(opts.center)\r\n            ? `${opts.center.latitude},${opts.center.longitude}`\r\n            : String(opts.center);\r\n\r\n        let size = utils.isPlainObject(opts.size)\r\n            ? `${opts.size.width}x${opts.size.height}`\r\n            : String(opts.size);\r\n\r\n        let url = enums.URL.GOOGLE_SATATIC_MAP // not using utils.setProtocol() here\r\n            + `?center=${center}&maptype=${opts.mapTypeId}`\r\n            + `&size=${size}&scale=${opts.scale}&zoom=${opts.zoom}`\r\n            + `&format=${opts.format}&language=${opts.language}`;\r\n\r\n        if (opts.marker) {\r\n            let color = utils.isString(opts.marker) ? opts.marker : 'red';\r\n            url += '&markers=' + encodeURIComponent(`color:${color}|${center}`);\r\n        }\r\n        if (opts.region) url += '&region=' + opts.region;\r\n        if (conf.google.key) url += '&key=' + conf.google.key;\r\n\r\n        let styles = getStyles(opts);\r\n        if (styles) url += '&' + geoHelper.mapStylesToParams(styles);\r\n\r\n        if (utils.isFunction(callback)) return callback(null, url);\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     *  Creates an interactive Google Map within the given element.\r\n     *  Make sure you have enabled Google Static Maps API in your Google Developers console.\r\n     *  For static map, see {@link #geolocator.getStaticMap|`geolocator.getStaticMap()` method}.\r\n     *  @see {@link https://developers.google.com/maps/documentation/javascript/reference|Google Maps JavaScript API}\r\n     *  @see {@link https://developers.google.com/maps/documentation/javascript/usage|Usage Limits}\r\n     *\r\n     *  @param {Object|String|HTMLElement|Map} options\r\n     *         Either map options object with the following properties or; the ID\r\n     *         of a DOM element, or element itself which the map will be\r\n     *         created within; or a previously created `google.maps.Map` instance.\r\n     *         If a map instance is set, this only will apply the options without\r\n     *         re-creating it.\r\n     *      @param {String|HTMLElement|Map} options.element\r\n     *             Either the ID of a DOM element or the element itself;\r\n     *             which the map will be created within; or a previously created\r\n     *             `google.maps.Map` instance. If a map instance is set, this\r\n     *             only will apply the options without re-creating it.\r\n     *      @param {Object} options.center\r\n     *             Center coordinates for the map to be created.\r\n     *          @param {Number} options.center.latitude\r\n     *                 Latitude of the center point coordinates.\r\n     *          @param {Number} options.center.longitude\r\n     *                 Longitude of the center point coordinates.\r\n     *      @param {String} [options.mapTypeId=\"roadmap\"]\r\n     *             Type of the map to be created.\r\n     *             See {@link #geolocator.MapTypeId|`geolocator.MapTypeId` enumeration}\r\n     *             for possible values.\r\n     *      @param {String} [options.title]\r\n     *             Title text to be displayed within an `InfoWindow`, when the\r\n     *             marker is clicked. This only take effect if `marker` is\r\n     *             enabled.\r\n     *      @param {Boolean} [options.marker=true]\r\n     *             Whether to place a marker at the given coordinates.\r\n     *             If `title` is set, an `InfoWindow` will be opened when the\r\n     *             marker is clicked.\r\n     *      @param {Number} [options.zoom=9]\r\n     *             Zoom level to be set for the map.\r\n     *      @param {Array} [options.styles]\r\n     *             An array of objects to customize the presentation of the\r\n     *             Google base maps, changing the visual display of such\r\n     *             elements as roads, parks, and built-up areas.\r\n     *             This will default to the global styles set via\r\n     *             {@link #geolocator.config|`geolocator.config` method}`, if any.\r\n     *             See {@link https://developers.google.com/maps/documentation/javascript/styling|Styling Maps}.\r\n     *\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the map is created.\r\n     *         This takes 2 arguments: `function (err, map) { ... }`.\r\n     *         See {@link #geolocator~MapData|`geolocator~MapData` type} for details.\r\n     *\r\n     *  @returns {void}\r\n     *\r\n     *  @example\r\n     *  var options = {\r\n     *      element: \"my-map\",\r\n     *      center: {\r\n     *          latitude: 48.8534100,\r\n     *          longitude: 2.3488000\r\n     *  \t},\r\n     *  \tmarker: true,\r\n     *  \ttitle: \"Paris, France\",\r\n     *  \tzoom: 12\r\n     *  };\r\n     *  geolocator.createMap(options, function (err, map) {\r\n     *      if (map && map.infoWindow) {\r\n     *          map.infoWindow.open(map.instance, map.marker);\r\n     *      }\r\n     *  });\r\n     */\r\n    static createMap(options, callback) {\r\n        // if options is not a plain object, consider element ID, `HTMLElement`,\r\n        // `jQuery` instance or `google.maps.Map` instance.\r\n        if (!utils.isPlainObject(options)) {\r\n            options = { element: options };\r\n        }\r\n\r\n        options = utils.extend({\r\n            element: null,\r\n            mapTypeId: enums.MapTypeId.ROADMAP,\r\n            title: undefined,\r\n            marker: true,\r\n            zoom: 9\r\n        }, options);\r\n\r\n        let e = options.element,\r\n            elem;\r\n        if (utils.isString(e)) {\r\n            elem = document.getElementById(e);\r\n        } else if (utils.isJQueryObject(e)) {\r\n            elem = e[0];\r\n        } else if (geolocator.isGoogleLoaded() && e instanceof google.maps.Map) {\r\n            elem = e.getDiv();\r\n        }\r\n\r\n        if (!utils.isElement(elem) && !utils.isNode(elem)) {\r\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS,\r\n                'A valid DOM element or element ID is required to create a map.');\r\n        }\r\n\r\n        if (!utils.isPlainObject(options.center)\r\n                || !utils.isNumber(options.center.latitude)\r\n                || !utils.isNumber(options.center.longitude)) {\r\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS,\r\n                'Center coordinates are required to create a map.');\r\n        }\r\n\r\n        options.element = elem;\r\n\r\n        let conf = geolocator._.config,\r\n            key = conf.google.key;\r\n        options.styles = getStyles(options);\r\n\r\n        geolocator.ensureGoogleLoaded(key, err => {\r\n            if (err) {\r\n                throw new GeoError(GeoError.Code.GOOGLE_API_FAILED, String(err.message || err));\r\n            }\r\n\r\n            let mapData = configCreateMap(options);\r\n            callback(null, mapData);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  Locates the user's location via HTML5 geolocation. This may\r\n     *  require/prompt for user's permission. If the permission is granted we'll\r\n     *  get the most accurate location information. Otherwise, we'll fallback to\r\n     *  locating via user's IP (if enabled).\r\n     *\r\n     *  For better accuracy, Geolocator implements a different approach than the\r\n     *  `getCurrentPosition` API; which generally triggers before the device's\r\n     *  GPS hardware can provide anything accurate. Thanks to\r\n     *  {@link https://github.com/gwilson/getAccurateCurrentPosition#background|Greg Wilson}\r\n     *  for the idea.\r\n     *\r\n     *  Also note that HTML5 Geolocation feature no more allows insecure origins.\r\n     *  See {@link https://goo.gl/rStTGz|this} for more details.\r\n     *  This means if you don't call this method from an HTTPS page, it will\r\n     *  fail. And if `options.fallbackToIP` is enabled, this will locate by IP.\r\n     *\r\n     *  @param {Object} [options]\r\n     *         HTML5 geo-location settings with some additional options.\r\n     *      @param {Boolean} [options.enableHighAccuracy=true]\r\n     *             Specifies whether the device should provide the most accurate\r\n     *             position it can. Note that setting this to `true` might\r\n     *             consume more CPU and/or battery power; and result in slower\r\n     *             response times.\r\n     *      @param {Number} [options.desiredAccuracy=30]\r\n     *             Minimum accuracy desired, in meters. Position will not be\r\n     *             returned until this is met, before the timeout. This only\r\n     *             takes effect if `enableHighAccuracy` is set to `true`.\r\n     *      @param {Number} [options.timeout=5000]\r\n     *             HTML5 position timeout setting in milliseconds. Setting this\r\n     *             to `Infinity` means that Geolocator won't return until the\r\n     *             position is available.\r\n     *      @param {Number} [options.maximumWait=10000]\r\n     *             Maximum time to wait (in milliseconds) for the desired\r\n     *             accuracy (which should be greater than `timeout`).\r\n     *             This only takes effect if `enableHighAccuracy` is set to\r\n     *             `true`.\r\n     *      @param {Number} [options.maximumAge=0]\r\n     *             HTML5 position maximum age. Indicates the maximum age in\r\n     *             milliseconds of a possible cached position that is acceptable\r\n     *             to return. `0` means, the device cannot use a cached position\r\n     *             and must attempt to retrieve the real current position. If set\r\n     *             to `Infinity` the device must return a cached position\r\n     *             regardless of its age. Note that if `enableHighAccuracy` is\r\n     *             set to `true`, `maximumAge` will be forced to `0`.\r\n     *      @param {Function} [options.onProgress]\r\n     *             If `enableHighAccuracy` is set to `true`, you can use this\r\n     *             callback to check the progress of the location accuracy;\r\n     *             while waiting for the final, best accurate location.\r\n     *      @param {Boolean} [options.fallbackToIP=false]\r\n     *             Specifies whether to fallback to IP geolocation if the HTML5\r\n     *             geolocation fails (e.g. user rejection).\r\n     *      @param {Boolean} [options.addressLookup=false]\r\n     *             Specifies whether to run a reverse-geocode operation for the\r\n     *             fetched coordinates to retrieve detailed address information.\r\n     *             Note that this means an additional request which requires a\r\n     *             Google API key to be set in the Geolocator configuration.\r\n     *             See {@link #geolocator.config|`geolocator.config()`}.\r\n     *      @param {Boolean} [options.timezone=false]\r\n     *             Specifies whether to also fetch the time zone information for\r\n     *             the receieved coordinates. Note that this means an additional\r\n     *             request which requires a Google API key to be set in the\r\n     *             Geolocator configuration.\r\n     *             See {@link #geolocator.config|`geolocator.config()`}.\r\n     *      @param {String|MapOptions} [options.map]\r\n     *             In order to create an interactive map from the fetched\r\n     *             location coordinates; either set this to a\r\n     *             {@link #geolocator~MapOptions|`MapOptions` object}\r\n     *             or; the ID of a DOM element or DOM element itself which the\r\n     *             map will be created within.\r\n     *      @param {Boolean|Object} [options.staticMap=false]\r\n     *             Set to `true` to get a static Google Map image URL (with\r\n     *             default options); or pass a static map options object.\r\n     *\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the request completes.\r\n     *         This takes 2 arguments: `function (err, location) { ... }`.\r\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\r\n     *\r\n     *  @returns {void}\r\n     *\r\n     *  @example\r\n     *  var options = {\r\n     *      enableHighAccuracy: true,\r\n     *      desiredAccuracy: 30,\r\n     *      timeout: 5000,\r\n     *      maximumWait: 10000,\r\n     *      maximumAge: 0,\r\n     *      fallbackToIP: true,\r\n     *      addressLookup: true,\r\n     *      timezone: true,\r\n     *      map: \"my-map\",\r\n     *      staticMap: true\r\n     *  };\r\n     *  geolocator.locate(options, function (err, location) {\r\n     *      console.log(err || location);\r\n     *  });\r\n     *\r\n     * @example\r\n     *  // location result:\r\n     *  {\r\n     *      coords: {\r\n     *          latitude: 37.4224764,\r\n     *          longitude: -122.0842499,\r\n     *          accuracy: 30,\r\n     *          altitude: null,\r\n     *          altitudeAccuracy: null,\r\n     *          heading: null,\r\n     *          speed: null\r\n     *      },\r\n     *      address: {\r\n     *          commonName: \"\",\r\n     *          street: \"Amphitheatre Pkwy\",\r\n     *          route: \"Amphitheatre Pkwy\",\r\n     *          streetNumber: \"1600\",\r\n     *          neighborhood: \"\",\r\n     *          town: \"\",\r\n     *          city: \"Mountain View\",\r\n     *          region: \"Santa Clara County\",\r\n     *          state: \"California\",\r\n     *          stateCode: \"CA\",\r\n     *          postalCode: \"94043\",\r\n     *          country: \"United States\",\r\n     *          countryCode: \"US\"\r\n     *      },\r\n     *      formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\r\n     *      type: \"ROOFTOP\",\r\n     *      placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\r\n     *      timezone: {\r\n     *          id: \"America/Los_Angeles\",\r\n     *          name: \"Pacific Standard Time\",\r\n     *          abbr: \"PST\",\r\n     *          dstOffset: 0,\r\n     *          rawOffset: -28800\r\n     *      },\r\n     *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\r\n     *      map: {\r\n     *          element: HTMLElement,\r\n     *          instance: Object, // google.maps.Map\r\n     *          marker: Object, // google.maps.Marker\r\n     *          infoWindow: Object, // google.maps.InfoWindow\r\n     *          options: Object // map options\r\n     *      },\r\n     *      staticMap: \"//maps.googleapis.com/maps/api/staticmap?center=37.4224764,-122.0842499&maptype=roadmap&size=600x300&scale=1&zoom=9&format=png&language=en&markers=color%3Ared%7C37.4224764%2C2-122.0842499&key=YOUR-GOOGLE-API-KEY\",\r\n     *      timestamp: 1456795956380\r\n     *  }\r\n     */\r\n    static locate(options, callback) {\r\n        options = utils.extend({\r\n            enableHighAccuracy: true,\r\n            timeout: 6000,\r\n            maximumWait: 10000,\r\n            maximumAge: 0,\r\n            desiredAccuracy: 30,\r\n            onProgress: utils.noop,\r\n            fallbackToIP: false,\r\n            addressLookup: false,\r\n            timezone: false,\r\n            map: undefined,\r\n            staticMap: false\r\n        }, options);\r\n\r\n        // force disable cache if high-accuracy is enabled\r\n        if (options.enableHighAccuracy) options.maximumAge = 0;\r\n        // set a min value for timeout\r\n        if (options.timeout < 1000) options.timeout = 1000;\r\n        // max wait should not be less than timeout\r\n        if (options.maximumWait < options.timeout) options.maximumWait = options.timeout;\r\n\r\n        // check options and Google key\r\n        checkGoogleKey(options);\r\n\r\n        let cb = callbackMap(options, callback);\r\n\r\n        function fallbackToIP(error) {\r\n            if (options.fallbackToIP) {\r\n                return geolocator.locateByIP(options, (err, location) => {\r\n                    if (err) return cb(err, null);\r\n                    return cb(null, location);\r\n                });\r\n            }\r\n            cb(error, null);\r\n        }\r\n        function onPositionReceived(location) {\r\n            fetchAddressAndTimezone(location, options, cb);\r\n        }\r\n        function onPositionError(err) {\r\n            err = GeoError.create(err);\r\n            fallbackToIP(err);\r\n        }\r\n\r\n        if (geolocator.isGeolocationSupported()) {\r\n            if (options.enableHighAccuracy) {\r\n                locateAccurate(options, onPositionReceived, onPositionError);\r\n            } else {\r\n                navigator.geolocation.getCurrentPosition(onPositionReceived, onPositionError, options);\r\n            }\r\n        } else {\r\n            let err = new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\r\n            fallbackToIP(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Returns a location and accuracy radius based on information about cell\r\n     *  towers and WiFi nodes that the mobile client can detect; via the Google\r\n     *  Maps Geolocation API.\r\n     *  @see {@link https://developers.google.com/maps/documentation/geolocation/intro|Google Maps Geolocation API}\r\n     *  @see {@link https://developers.google.com/maps/documentation/geolocation/usage-limits|Usage Limits}\r\n     *\r\n     *  @param {Object} [options]\r\n     *         Geolocation options.\r\n     *      @param {Number} [options.homeMobileCountryCode]\r\n     *             The mobile country code (MCC) for the device's home network.\r\n     *      @param {Number} [options.homeMobileNetworkCode]\r\n     *             The mobile network code (MNC) for the device's home network.\r\n     *      @param {String} [options.radioType]\r\n     *             The mobile radio type.\r\n     *             See {@link #geolocator.RadioType|`geolocator.RadioType` enumeration}\r\n     *             for possible values. While this field is optional, it should\r\n     *             be included if a value is available, for more accurate results.\r\n     *      @param {string} [options.carrier]\r\n     *             The carrier name. e.g. \"Vodafone\"\r\n     *      @param {Boolean} [options.fallbackToIP=false]\r\n     *             Specifies whether to fallback to IP geolocation if wifi and\r\n     *             cell tower signals are not available. Note that the IP address\r\n     *             in the request header may not be the IP of the device. Set\r\n     *             `fallbackToIP` to `false` to disable fall back.\r\n     *      @param {Array} [options.cellTowers]\r\n     *             An array of cell tower objects.\r\n     *             See {@link https://developers.google.com/maps/documentation/geolocation/intro#cell_tower_object|Cell tower objects} for details.\r\n     *      @param {Array} [options.wifiAccessPoints]\r\n     *             An array of WiFi access point objects.\r\n     *             See {@link https://developers.google.com/maps/documentation/geolocation/intro#wifi_access_point_object|WiFi access point objects} for details.\r\n     *      @param {Boolean} [options.addressLookup=false]\r\n     *             Specifies whether to run a reverse-geocode operation for the\r\n     *             fetched coordinates to retrieve detailed address information.\r\n     *             Note that this means an additional request which requires a\r\n     *             Google API key to be set in the Geolocator configuration.\r\n     *             See {@link #geolocator.config|`geolocator.config()`}.\r\n     *      @param {Boolean} [options.timezone=false]\r\n     *             Specifies whether to also fetch the time zone information for\r\n     *             the receieved coordinates. Note that this means an additional\r\n     *             request which requires a Google API key to be set in the\r\n     *             Geolocator configuration.\r\n     *             See {@link #geolocator.config|`geolocator.config()`}.\r\n     *      @param {String|MapOptions} [options.map]\r\n     *             In order to create an interactive map from the fetched\r\n     *             location coordinates; either set this to a\r\n     *             {@link #geolocator~MapOptions|`MapOptions` object}\r\n     *             or; the ID of a DOM element or DOM element itself which the\r\n     *             map will be created within.\r\n     *      @param {Boolean|Object} [options.staticMap=false]\r\n     *             Set to `true` to get a static Google Map image URL (with\r\n     *             default options); or pass a static map options object.\r\n     *      @param {Boolean} [options.raw=false]\r\n     *      \t      Whether to return the raw Google API result.\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the request completes.\r\n     *         This takes 2 arguments: `function (err, location) { ... }`.\r\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\r\n     *\r\n     *  @returns {void}\r\n     *\r\n     *  @example\r\n     *  var options = {\r\n     *      homeMobileCountryCode: 310,\r\n     *      homeMobileNetworkCode: 410,\r\n     *      carrier: 'Vodafone',\r\n     *      radioType: geolocator.RadioType.GSM,\r\n     *      fallbackToIP: true,\r\n     *      addressLookup: false,\r\n     *      timezone: false,\r\n     *      map: \"my-map\",\r\n     *      staticMap: false\r\n     *  };\r\n     *  geolocator.locateByMobile(options, function (err, location) {\r\n     *      console.log(err || location);\r\n     *  });\r\n     */\r\n    static locateByMobile(options, callback) {\r\n        if (!utils.isPlainObject(options)) {\r\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\r\n        }\r\n\r\n        let cb = callbackMap(options, callback);\r\n\r\n        options = utils.extend({\r\n            homeMobileCountryCode: undefined,\r\n            homeMobileNetworkCode: undefined,\r\n            radioType: undefined,\r\n            carrier: undefined,\r\n            fallbackToIP: false,\r\n            cellTowers: undefined,\r\n            wifiAccessPoints: undefined,\r\n            addressLookup: false,\r\n            timezone: false,\r\n            map: undefined,\r\n            raw: false\r\n        }, options);\r\n\r\n        options.considerIp = options.fallbackToIP;\r\n        // check Google key\r\n        checkGoogleKey();\r\n\r\n        let conf = geolocator._.config,\r\n            key = conf.google.key || '',\r\n            url = utils.setProtocol(enums.URL.GOOGLE_GEOLOCATION, conf.https),\r\n            xhrOpts = {\r\n                url: `${url}?key=${key}`,\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                data: JSON.stringify(options)\r\n            };\r\n        // console.log(xhrOpts.data);\r\n\r\n        fetch.post(xhrOpts, (err, xhr) => {\r\n            let response = getXHRResponse(err, xhr);\r\n            if (GeoError.isGeoError(response)) return cb(response, null);\r\n\r\n            response = options.raw ? response : {\r\n                coords: {\r\n                    latitude: response.location.lat,\r\n                    longitude: response.location.lng,\r\n                    accuracy: response.accuracy\r\n                },\r\n                timestamp: utils.time()\r\n            };\r\n\r\n            fetchAddressAndTimezone(response, options, cb);\r\n\r\n            // e.g. raw response\r\n            // {\r\n            //     \"location\": {\r\n            //         \"lat\": 51.0,\r\n            //         \"lng\": -0.1\r\n            //     },\r\n            //     \"accuracy\": 1200.4\r\n            // }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  Locates the user's location by the client's IP.\r\n     *\r\n     *  This method uses a free lookup service, by default.\r\n     *  In order to change the source provider, you can use\r\n     *  {@link #geolocator.setGeoIPSource|`geolocator.setGeoIPSource()` method}.\r\n     *\r\n     *  @param {Object} [options]\r\n     *         Locate options.\r\n     *      @param {Boolean} [options.addressLookup=false]\r\n     *             Specifies whether to run a reverse-geocode operation for the\r\n     *             fetched coordinates to retrieve detailed address information.\r\n     *             Since no precise address can be fetched from an IP addres; you\r\n     *             should only enable this if the Geo-IP Source returns no useful\r\n     *             address information other than coordinates. Also, note that\r\n     *             this means an additional request which requires a Google API\r\n     *             key to be set in the Geolocator configuration.\r\n     *             See {@link #geolocator.config|`geolocator.config()`}.\r\n     *      @param {Boolean} [options.timezone=false]\r\n     *             Specifies whether to also fetch the time zone information for\r\n     *             the receieved coordinates. Note that this means an additional\r\n     *             request which requires a Google API key to be set in the\r\n     *             Geolocator configuration.\r\n     *             See {@link #geolocator.config|`geolocator.config()`}.\r\n     *      @param {String|MapOptions} [options.map]\r\n     *             In order to create an interactive map from the fetched\r\n     *             location coordinates; either set this to a\r\n     *             {@link #geolocator~MapOptions|`MapOptions` object}\r\n     *             or; the ID of a DOM element or DOM element itself which the\r\n     *             map will be created within.\r\n     *      @param {Boolean|Object} [options.staticMap=false]\r\n     *             Set to `true` to get a static Google Map image URL (with\r\n     *             default options); or pass a static map options object.\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the request completes.\r\n     *         This takes 2 arguments: `function (err, location) { ... }`.\r\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\r\n     *\r\n     *  @returns {void}\r\n     *\r\n     *  @example\r\n     *  var options = {\r\n     *  \taddressLookup: true,\r\n     *  \ttimezone: true,\r\n     *  \tmap: \"my-map\",\r\n     *  \tstaticMap: true\r\n     *  };\r\n     *  geolocator.locateByIP(options, function (err, location) {\r\n     *  \tconsole.log(err || location);\r\n     *  });\r\n     *\r\n     *  @example\r\n     *  // location result:\r\n     *  {\r\n     *      coords: {\r\n     *          latitude: 41.0214,\r\n     *          longitude: 28.9948,\r\n     *      },\r\n     *      address: {\r\n     *          city: \"Istanbul\",\r\n     *          region: \"34\",\r\n     *          state: \"34\",\r\n     *          country: \"Turkey\",\r\n     *          countryCode: \"TR\"\r\n     *      },\r\n     *      formattedAddress: \"Demirtaş, Tesviyeci Sk. No:7, 34134 Fatih/İstanbul, Turkey\",\r\n     *      type: \"ROOFTOP\",\r\n     *      placeId: \"ChIJ-ZRLfO25yhQRBi5YJxX80Q0\",\r\n     *      timezone: {\r\n     *          id: \"Europe/Istanbul\",\r\n     *          name: \"Eastern European Summer Time\",\r\n     *          abbr: \"EEST\",\r\n     *          dstOffset: 3600,\r\n     *          rawOffset: 7200\r\n     *      },\r\n     *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/tr.svg\",\r\n     *      map: {\r\n     *          element: HTMLElement,\r\n     *          instance: Object, // google.maps.Map\r\n     *          marker: Object, // google.maps.Marker\r\n     *          infoWindow: Object, // google.maps.InfoWindow\r\n     *          options: Object // map options\r\n     *      },\r\n     *      staticMap: \"//maps.googleapis.com/maps/api/staticmap?center=41.0214,28.9948&maptype=roadmap&size=600x300&scale=1&zoom=9&format=png&language=en&markers=color%3Ared%7C41.0214%2C228.9948&key=YOUR-GOOGLE-API-KEY\",\r\n     *      provider: \"geobytes\",\r\n     *      timestamp: 1466216325223\r\n     *  }\r\n     */\r\n    static locateByIP(options, callback) {\r\n        // passed source can be a string or object\r\n        let source = geolocator._.geoIpSource;\r\n\r\n        if (!utils.isPlainObject(source)) {\r\n            throw new GeoError(\r\n                GeoError.Code.INVALID_GEO_IP_SOURCE,\r\n                'Please set a valid Geo-IP Source via geolocator.setGeoIPSource(options).'\r\n            );\r\n        }\r\n\r\n        // check options and Google key\r\n        checkGoogleKey(options || {});\r\n\r\n        function updateResponse(response) {\r\n            if (!response) {\r\n                const err = new GeoError(GeoError.Code.INVALID_RESPONSE);\r\n                return callback(err, null);\r\n            }\r\n            if (utils.isPlainObject(source.schema)) {\r\n                response = utils.mapToSchema(response, source.schema);\r\n            } else if (utils.isFunction(source.schema)) {\r\n                response = source.schema(response);\r\n            }\r\n            response.provider = source.provider || 'unknown';\r\n            setLocationURLs(response, options);\r\n            if (response.coords) {\r\n                response.coords.latitude = Number(response.coords.latitude);\r\n                response.coords.longitude = Number(response.coords.longitude);\r\n            }\r\n            let cb = callbackMap(options, callback);\r\n            fetchAddressAndTimezone(response, options, cb);\r\n        }\r\n\r\n        if (source.xhr) {\r\n            let opts = {\r\n                url: source.url,\r\n                async: true\r\n            };\r\n            return fetch.get(opts, (err, xhr) => {\r\n                const response = xhr.responseText ? JSON.parse(xhr.responseText) : null;\r\n                if (err) return callback(GeoError.create(err), null);\r\n                updateResponse(response);\r\n            });\r\n\r\n        }\r\n\r\n        if (source.callbackParam || source.globalVar) {\r\n            let jsonpOpts = {\r\n                url: source.url,\r\n                async: true,\r\n                clean: true\r\n                // params: {}\r\n            };\r\n            if (source.callbackParam) {\r\n                jsonpOpts.callbackParam = source.callbackParam;\r\n                jsonpOpts.rootName = 'geolocator._.cb';\r\n            }\r\n            return fetch.jsonp(jsonpOpts, (err, response) => {\r\n                if (err) return callback(GeoError.create(err), null);\r\n                if (source.globalVar) {\r\n                    if (window[source.globalVar]) {\r\n                        response = utils.clone(window[source.globalVar]);\r\n                        delete window[source.globalVar];\r\n                    } else {\r\n                        response = null;\r\n                    }\r\n                }\r\n                updateResponse(response);\r\n            });\r\n        }\r\n\r\n        throw new GeoError(\r\n            GeoError.Code.INVALID_GEO_IP_SOURCE,\r\n            'Either xhr, callbackParam or globalVar should be set for Geo-IP source.'\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  Sets the Geo-IP source to be used for fetching location information\r\n     *  by user's IP; which is internally used by\r\n     *  {@link #geolocator.locateByIP|`geolocator.locateByIP()` method}.\r\n     *\r\n     *  By default, Geolocator uses a free Geo-IP source provider.\r\n     *  You can use this method to change this; or you can choose from\r\n     *  ready-to-use\r\n     *  {@link https://github.com/onury/geolocator/tree/master/src/geo-ip-sources|Geo-IP sources}.\r\n     *\r\n     *  @param {Object} options\r\n     *         Geo-IP Source options.\r\n     *      @param {String} [options.provider]\r\n     *             Source or service provider's name.\r\n     *      @param {String} options.url\r\n     *             Source URL without the callback query parameter. The callback\r\n     *             name (if supported) should be set via `options.callbackParam`.\r\n     *             Also, make sure the service supports the protocol you use in\r\n     *             the enums.URL. If it supports both HTTP and HTTPS, you can omit the\r\n     *             protocol. In this case, it will be determined via Geolocator\r\n     *             configuration.\r\n     *             See {@link #geolocator.config|`geolocator.config()`}.\r\n     *             NOTE: Do not forget to include your API key in the query\r\n     *             parameters of the URL, if you have one.\r\n     *      @param {String} [options.callbackParam]\r\n     *             If JSON callback is supported, pass the name of the callback\r\n     *             parameter, defined by the provider.\r\n     *      @param {Object} [options.globalVar]\r\n     *             Set this instead of `options.callbackParam` if the service\r\n     *             does not support JSON callbacks, but weirdly set a global\r\n     *             variable in the document. For example, if the response is\r\n     *             `Geo = { lat, lng }`, you should set this to `\"Geo\"`.\r\n     *      @param {Object} [options.schema]\r\n     *             Schema object to be used to re-structure the response returned\r\n     *             from the service. Set the response object's keys as values of\r\n     *             a custom object to map the format to the `location` object.\r\n     *             For example; if the service returns a response like\r\n     *             `{ lat: 40.112233, lng: 10.112233, otherProp: 'hello' }`.\r\n     *             Then you should set the following schema:\r\n     *             `{ coords: { latitude: 'lat', longitude: 'lng' } }`.\r\n     *\r\n     *  @return {geolocator}\r\n     */\r\n    static setGeoIPSource(options) {\r\n        if (!utils.isPlainObject(options)) {\r\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS, 'Geo-IP source options is invalid.');\r\n        }\r\n        if (!utils.isStringSet(options.url)) {\r\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS, 'Geo-IP source should have a valid URI.');\r\n        }\r\n        // if (!utils.isStringSet(options.callbackParam) && !utils.isStringSet(options.globalVar)) {\r\n        //     throw new GeoError(GeoError.Code.INVALID_PARAMETERS, 'No \\'callbackParam\\' or \\'globalVar\\' is provided for the Geo-IP Source options.');\r\n        // }\r\n        geolocator._.geoIpSource = Object.freeze(options);\r\n    }\r\n\r\n    /**\r\n     *  Registers a handler for watching the user's location via HTML5\r\n     *  geolocation; that is triggered each time the position of the device\r\n     *  changes. This may require/prompt for user's permission.\r\n     *\r\n     *  @param {Object} [options]\r\n     *         HTML5 geo-location settings.\r\n     *      @param {Boolean} [options.enableHighAccuracy=true]\r\n     *             Specifies whether the device should provide the most accurate\r\n     *             position it can. Note that setting this to `true` might consume\r\n     *             more CPU and/or battery power; and result in slower response\r\n     *             times.\r\n     *      @param {Number} [options.timeout=6000]\r\n     *             HTML5 position timeout setting in milliseconds. Setting this\r\n     *             to `Infinity` means that Geolocator won't return until the\r\n     *             position is available.\r\n     *      @param {Number} [options.maximumAge=0]\r\n     *             HTML5 position maximum age. Indicates the maximum age in\r\n     *             milliseconds of a possible cached position that is acceptable\r\n     *             to return. `0` means, the device cannot use a cached position\r\n     *             and must attempt to retrieve the real current position. If set\r\n     *             to `Infinity` the device must return a cached position\r\n     *             regardless of its age.\r\n     *      @param {Boolean} [options.clearOnError=false]\r\n     *             Specifies whether to clear the watcher on first error so that\r\n     *             it does not execute any more callbacks.\r\n     *      @param {Object} [options.target]\r\n     *             Object that defines the target location and settings; that\r\n     *             when the location is reached, the watcher will auto-clear\r\n     *             itself and invoke the callback.\r\n     *      @param {Number} options.target.latitude\r\n     *             The `latitude` of the target location.\r\n     *      @param {Number} options.target.longitude\r\n     *             The `longitude` of the target location.\r\n     *      @param {Number} [options.target.radius=0.5]\r\n     *             The radius, in other words; the minimum distance (in\r\n     *             kilometers or miles) to the target point that should be\r\n     *             reached.\r\n     *      @param {Number} [options.target.unitSystem=0]\r\n     *             Unit system to be used for target radius.\r\n     *             See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\r\n     *             for possible values.\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the request completes.\r\n     *         This takes 2 arguments: `function (err, location) { ... }`.\r\n     *         If `options.target` is set, `location` will also\r\n     *         include a `targetReached:Boolean` property.\r\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\r\n     *\r\n     *  @returns {GeoWatcher} - A watcher object that provides a\r\n     *  `.clear(delay:Number, callback:Function)` method to clear the watcher\r\n     *  when needed. Optional `delay` argument can be set (in milliseconds) to\r\n     *  clear in a later time. Omitting this argument will clear the watcher\r\n     *  immediately. You should always call this method, except if you've set up\r\n     *  a target; which will auto-clear the watcher when reached.\r\n     *\r\n     *  @example\r\n     *  // Watch my position for 5 minutes.\r\n     *  var options = { enableHighAccuracy: true, timeout: 6000, maximumAge: 0 };\r\n     *  var watcher = geolocator.watch(options, function (err, location) {\r\n     *      console.log(err || location);\r\n     *  });\r\n     *  console.log(watcher.id); // ID of the watcher\r\n     *  watcher.clear(300000); // clear after 5 minutes.\r\n     *\r\n     *  @example\r\n     *  // Watch my position until I'm 350 meters near Disneyland Park.\r\n     *  options.target = {\r\n     *      latitude: 33.8120918,\r\n     *      longitude: -117.9233569,\r\n     *      radius: 0.35,\r\n     *      unitSystem: geolocator.UnitSystem.METRIC\r\n     *  };\r\n     *  watcher = geolocator.watch(options, function (err, location) {\r\n     *      if (err) {\r\n     *          console.log(err);\r\n     *          return;\r\n     *      }\r\n     *      if (location.targetReached) {\r\n     *          console.log(watcher.isCleared); // true\r\n     *          console.log(watcher.cycle); // 15 — target reached after 15 cycles\r\n     *      } else {\r\n     *          console.log(watcher.isCleared); // false — watcher is active.\r\n     *      }\r\n     *  });\r\n     */\r\n    static watch(options, callback) {\r\n        if (!geolocator.isGeolocationSupported()) {\r\n            callback(new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED), null);\r\n            return {};\r\n        }\r\n\r\n        let watcher, target;\r\n\r\n        options = utils.extend({\r\n            enableHighAccuracy: true,\r\n            timeout: 6000,\r\n            maximumAge: 0,\r\n            clearOnError: false\r\n        }, options);\r\n\r\n        if (utils.isPlainObject(options.target)) {\r\n            target = utils.extend({\r\n                radius: 0.5,\r\n                unitSystem: geolocator.UnitSystem.METRIC\r\n            }, options.target);\r\n        }\r\n\r\n        function onPositionChanged(location) {\r\n            let pos = utils.clone(location, { own: false });\r\n            if (target) {\r\n                let distance = geolocator.calcDistance({\r\n                    from: location.coords,\r\n                    to: target,\r\n                    formula: geolocator.DistanceFormula.HAVERSINE,\r\n                    unitSystem: target.unitSystem\r\n                });\r\n                pos.targetReached = distance <= target.radius;\r\n                if (watcher && pos.targetReached) {\r\n                    watcher.clear(() => {\r\n                        return callback(null, pos);\r\n                    });\r\n                }\r\n            }\r\n            return callback(null, pos);\r\n        }\r\n        function onPositionError(err) {\r\n            callback(GeoError.create(err), null);\r\n        }\r\n        return new GeoWatcher(onPositionChanged, onPositionError, options);\r\n    }\r\n\r\n    /**\r\n     *  Converts a given address (or address components) into geographic\r\n     *  coordinates (i.e. latitude, longitude); and gets detailed address\r\n     *  information.\r\n     *  @see {@link https://developers.google.com/maps/documentation/geocoding/intro|Google Maps Geocoding API}\r\n     *  @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\r\n     *\r\n     *  @param {String|Object} options\r\n     *         Either the address to geocode or geocoding options with the\r\n     *         following properties.\r\n     *      @param {String} options.address\r\n     *             The street address to geocode, in the format used by the\r\n     *             national postal service of the country concerned. Additional\r\n     *             address elements such as business names and unit, suite or\r\n     *             floor numbers should be avoided. Note that any address\r\n     *             component (route, locality, administrativeArea, postalCode and\r\n     *             country) should be specified either in address or the\r\n     *             corresponding property - not both. Doing so may result in\r\n     *             `ZERO_RESULTS`.\r\n     *      @param {String} [options.route]\r\n     *      \t      Long or short name of a route.\r\n     *      @param {String} [options.locality]\r\n     *      \t      Locality and sublocality of the location.\r\n     *      @param {String} [options.administrativeArea]\r\n     *      \t      Administrative area of the location.\r\n     *      @param {String} [options.postalCode]\r\n     *      \t      Postal code of the location.\r\n     *      @param {String} [options.country]\r\n     *      \t      A country name or a two letter ISO 3166-1 country code.\r\n     *      @param {String} [options.region]\r\n     *      \t      The region code, specified as a ccTLD (\"top-level domain\")\r\n     *      \t      two-character value. e.g.: `\"fr\"` for France.\r\n     *      @param {Array|Object} [options.bounds]\r\n     *      \t      The bounding box of the viewport within which to bias geocode\r\n     *      \t      results more prominently. e.g.:\r\n     *      \t      `[ southwestLat:Number, southwestLng:Number, northeastLat:Number, northeastLng:Number ]`\r\n     *      @param {String|MapOptions} [options.map]\r\n     *             In order to create an interactive map from the fetched\r\n     *             location coordinates; either set this to a\r\n     *             {@link #geolocator~MapOptions|`MapOptions` object}\r\n     *             or; the ID of a DOM element or DOM element itself which the\r\n     *             map will be created within.\r\n     *      @param {Boolean|Object} [options.staticMap=false]\r\n     *             Set to `true` to get a static Google Map image URL (with\r\n     *             default options); or pass a static map options object.\r\n     *      @param {Boolean} [options.raw=false]\r\n     *      \t      Whether to return the raw Google API result.\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the request completes.\r\n     *         This takes 2 arguments: `function (err, location) { ... }`.\r\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\r\n     *\r\n     *  @returns {void}\r\n     *\r\n     *  @example\r\n     *  var address = '1600 Amphitheatre Parkway, CA';\r\n     *  geolocator.geocode(address, function (err, location) {\r\n     *      console.log(err || location);\r\n     *  });\r\n     *\r\n     *  @example\r\n     *  // location result:\r\n     *  {\r\n     *      coords: {\r\n     *          latitude: 37.4224764,\r\n     *          longitude: -122.0842499\r\n     *      },\r\n     *      address: {\r\n     *          commonName: \"\",\r\n     *          street: \"Amphitheatre Pkwy\",\r\n     *          route: \"Amphitheatre Pkwy\",\r\n     *          streetNumber: \"1600\",\r\n     *          neighborhood: \"\",\r\n     *          town: \"\",\r\n     *          city: \"Mountain View\",\r\n     *          region: \"Santa Clara County\",\r\n     *          state: \"California\",\r\n     *          stateCode: \"CA\",\r\n     *          postalCode: \"94043\",\r\n     *          country: \"United States\",\r\n     *          countryCode: \"US\"\r\n     *      },\r\n     *      formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\r\n     *      type: \"ROOFTOP\",\r\n     *      placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\r\n     *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\r\n     *      map: {\r\n     *          element: HTMLElement,\r\n     *          instance: Object, // google.maps.Map\r\n     *          marker: Object, // google.maps.Marker\r\n     *          infoWindow: Object, // google.maps.InfoWindow\r\n     *          options: Object // map options\r\n     *      },\r\n     *      timestamp: 1456795956380\r\n     *  }\r\n     */\r\n    static geocode(options, callback) {\r\n        geocode(false, options, callback);\r\n    }\r\n\r\n    /**\r\n     *  Converts the given geographic coordinates into a human-readable address\r\n     *  information.\r\n     *  @see {@link https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding|Google Maps (Reverse) Geocoding API}\r\n     *  @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\r\n     *  @alias geolocator.addressLookup\r\n     *\r\n     *  @param {Object|String} options\r\n     *         Either the `placeId` of the location or Reverse Geocoding options\r\n     *         with the following properties.\r\n     *      @param {Number} options.latitude\r\n     *      Latitude of the target location.\r\n     *      @param {Number} options.longitude\r\n     *      Longitude of the target location.\r\n     *      @param {String} [options.placeId]\r\n     *             Required if `latitude` and `longitude` are omitted. The place\r\n     *             ID of the place for which you wish to obtain the\r\n     *             human-readable address. The place ID is a unique identifier\r\n     *             that can be used with other Google APIs. Note that if\r\n     *             `placeId` is set, `latitude` and `longitude` are ignored.\r\n     *      @param {String|MapOptions} [options.map]\r\n     *             In order to create an interactive map from the fetched\r\n     *             location coordinates; either set this to a\r\n     *             {@link #geolocator~MapOptions|`MapOptions` object}\r\n     *             or; the ID of a DOM element or DOM element itself which the\r\n     *             map will be created within.\r\n     *      @param {Boolean|Object} [options.staticMap=false]\r\n     *             Set to `true` to get a static Google Map image URL (with\r\n     *             default options); or pass a static map options object.\r\n     *      @param {Boolean} [options.raw=false]\r\n     *             Whether to return the raw Google API result.\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the request completes.\r\n     *         This takes 2 arguments: `function (err, location) { ... }`\r\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\r\n     *\r\n     *  @returns {void}\r\n     *\r\n     *  @example\r\n     *  var coords = {\r\n     *      latitude: 37.4224764,\r\n     *      longitude: -122.0842499\r\n     *  };\r\n     *\r\n     *  geolocator.reverseGeocode(coords, function (err, location) {\r\n     *      console.log(err || location);\r\n     *  });\r\n     *\r\n     *  @example\r\n     *  // location result:\r\n     *  {\r\n     *      coords: {\r\n     *          latitude: 37.4224764,\r\n     *          longitude: -122.0842499\r\n     *      },\r\n     *      address: {\r\n     *          commonName: \"\",\r\n     *          street: \"Amphitheatre Pkwy\",\r\n     *          route: \"Amphitheatre Pkwy\",\r\n     *          streetNumber: \"1600\",\r\n     *          neighborhood: \"\",\r\n     *          town: \"\",\r\n     *          city: \"Mountain View\",\r\n     *          region: \"Santa Clara County\",\r\n     *          state: \"California\",\r\n     *          stateCode: \"CA\",\r\n     *          postalCode: \"94043\",\r\n     *          country: \"United States\",\r\n     *          countryCode: \"US\"\r\n     *      },\r\n     *      formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\r\n     *      type: \"ROOFTOP\",\r\n     *      placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\r\n     *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\r\n     *      map: {\r\n     *          element: HTMLElement,\r\n     *          instance: Object, // google.maps.Map\r\n     *          marker: Object, // google.maps.Marker\r\n     *          infoWindow: Object, // google.maps.InfoWindow\r\n     *          options: Object // map options\r\n     *      },\r\n     *      timestamp: 1456795956380\r\n     *  }\r\n     */\r\n    static reverseGeocode(options, callback) {\r\n        geocode(true, options, callback);\r\n    }\r\n\r\n    /**\r\n     *  Alias for `geolocator.reverseGeocode`\r\n     *  @private\r\n     */\r\n    static addressLookup(options, callback) {\r\n        geolocator.reverseGeocode(options, callback);\r\n    }\r\n\r\n    /**\r\n     *  Gets timezone information for the given coordinates.\r\n     *  Note: Google Browser API keys cannot have referer restrictions when used with this API.\r\n     *  @see {@link https://developers.google.com/maps/documentation/timezone/intro|Google Maps TimeZone API}\r\n     *  @see {@link https://developers.google.com/maps/documentation/timezone/usage-limits|Usage Limits}\r\n     *\r\n     *  @param {Object} options\r\n     *         Time zone options.\r\n     *      @param {Number} options.latitude\r\n     *             Latitude of location.\r\n     *      @param {Number} options.longitude\r\n     *             Longitude of location.\r\n     *      @param {Number} [options.timestamp=Date.now()]\r\n     *             Specifies the desired time as seconds since midnight, January\r\n     *             1, 1970 UTC. This is used to determine whether or not Daylight\r\n     *             Savings should be applied.\r\n     *      @param {Boolean} [options.raw=false]\r\n     *             Whether to return the raw Google API result.\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the request completes, in\r\n     *         the following signature: `function (err, timezone) { ... }`.\r\n     *         See {@link #geolocator~TimeZone|`geolocator~TimeZone` type} for\r\n     *         details.\r\n     *\r\n     *  @returns {void}\r\n     *\r\n     *  @example\r\n     *  var options = {\r\n     *      latitude: 48.8534100,\r\n     *      longitude: 2.3488000\r\n     *  };\r\n     *  geolocator.getTimeZone(options, function (err, timezone) {\r\n     *      console.log(err || timezone);\r\n     *  });\r\n     *\r\n     *  @example\r\n     *  // timezone result:\r\n     *  {\r\n     *      id: \"Europe/Paris\",\r\n     *      name: \"Central European Standard Time\",\r\n     *      abbr: \"CEST\",\r\n     *      dstOffset: 0,\r\n     *      rawOffset: 3600,\r\n     *      timestamp: 1455733120\r\n     *  }\r\n     */\r\n    static getTimeZone(options, callback) {\r\n        if (!utils.isPlainObject(options)\r\n                || !utils.isNumber(options.latitude)\r\n                || !utils.isNumber(options.longitude)) {\r\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\r\n        }\r\n\r\n        checkGoogleKey();\r\n\r\n        let conf = geolocator._.config;\r\n        options = utils.extend({\r\n            key: conf.google.key || '',\r\n            language: conf.language || 'en',\r\n            timestamp: utils.time(true),\r\n            raw: false\r\n        }, options);\r\n\r\n        let url = utils.setProtocol(enums.URL.GOOGLE_TIMEZONE, conf.https),\r\n            xhrOpts = {\r\n                url: `${url}?location=${options.latitude},${options.longitude}&timestamp=${options.timestamp}&language=${options.language}&key=${options.key}`\r\n            };\r\n\r\n        fetch.xhr(xhrOpts, (err, xhr) => {\r\n            let response = getXHRResponse(err, xhr);\r\n            if (GeoError.isGeoError(response)) return callback(response, null);\r\n\r\n            response = options.raw ? response : {\r\n                id: response.timeZoneId,\r\n                name: response.timeZoneName,\r\n                abbr: utils.abbr(response.timeZoneName, { dots: false }),\r\n                dstOffset: response.dstOffset,\r\n                rawOffset: response.rawOffset,\r\n                timestamp: options.timestamp\r\n            };\r\n            callback(err, response);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  Gets the distance and duration values based on the recommended route\r\n     *  between start and end points.\r\n     *  @see {@link https://developers.google.com/maps/documentation/distance-matrix/intro|Google Maps Distance Matrix API}\r\n     *  @see {@link https://developers.google.com/maps/documentation/distance-matrix/usage-limits|Usage Limits}\r\n     *\r\n     *  @param {Object} options\r\n     *         Distance matrix options.\r\n     *      @param {String|Object|Array} options.origins\r\n     *             One or more addresses and/or an object of latitude/longitude\r\n     *             values, from which to calculate distance and time. If you pass\r\n     *             an address as a string, the service will geocode the string\r\n     *             and convert it to a latitude/longitude coordinate to calculate\r\n     *             distances. Following are valid examples:\r\n     *  <pre><code>options.origins = 'London';\r\n     *  options.origins = ['London', 'Paris'];\r\n     *  options.origins = { latitude: 51.5085300, longitude: -0.1257400 };\r\n     *  options.origins = [\r\n     *      { latitude: 51.5085300, longitude: -0.1257400 },\r\n     *      { latitude: 48.8534100, longitude: 2.3488000 }\r\n     *  ];\r\n     *  </code></pre>\r\n     *      @param {String|Object|Array} options.destinations\r\n     *             One or more addresses and/or an object of latitude/longitude\r\n     *             values, from which to calculate distance and time. If you pass\r\n     *             an address as a string, the service will geocode the string\r\n     *             and convert it to a latitude/longitude coordinate to calculate\r\n     *             distances.\r\n     *      @param {String} [options.travelMode=\"DRIVING\"]\r\n     *             Type of routing requested.\r\n     *             See {@link #geolocator.TravelMode|`geolocator.TravelMode` enumeration}\r\n     *             for possible values.\r\n     *      @param {Boolean} [options.avoidFerries]\r\n     *             If true, instructs the Distance Matrix service to avoid\r\n     *             ferries where possible.\r\n     *      @param {Boolean} [options.avoidHighways]\r\n     *             If true, instructs the Distance Matrix service to avoid\r\n     *             highways where possible.\r\n     *      @param {Boolean} [options.avoidTolls]\r\n     *             If true, instructs the Distance Matrix service to avoid toll\r\n     *             roads where possible.\r\n     *      @param {Number} [options.unitSystem=0]\r\n     *             Preferred unit system to use when displaying distance.\r\n     *             See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\r\n     *             for possible values.\r\n     *      @param {String} [options.region]\r\n     *             Region code used as a bias for geocoding requests.\r\n     *  @param {Boolean} [options.raw=false]\r\n     *         Whether to return the raw Google API result.\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the request completes,\r\n     *         in the following signature: `function (err, result) { ... }`\r\n     *\r\n     *  @returns {void}\r\n     *\r\n     *  @example\r\n     *  var options = {\r\n     *      origins: [{ latitude: 51.5085300, longitude: -0.1257400 }],\r\n     *      destinations: [{ latitude: 48.8534100, longitude: 2.3488000 }],\r\n     *      travelMode: geolocator.TravelMode.DRIVING,\r\n     *      unitSystem: geolocator.UnitSystem.METRIC\r\n     *  };\r\n     *  geolocator.getDistanceMatrix(options, function (err, result) {\r\n     *      console.log(err || result);\r\n     *  });\r\n     *\r\n     *  @example\r\n     *  // result:\r\n     *  [\r\n     *  \t{\r\n     *  \t\tfrom: \"449 Duncannon St, London WC2R 0DZ, UK\",\r\n     *  \t\tto: \"1 Parvis Notre-Dame - Pl. Jean-Paul II, 75004 Paris-4E-Arrondissement, France\",\r\n     *  \t\tdistance: {\r\n     *  \t\t\tvalue: 475104,\r\n     *  \t\t\ttext: \"475 km\"\r\n     *  \t\t},\r\n     *  \t\tduration: {\r\n     *  \t\t\tvalue: 20193,\r\n     *  \t\t\ttext: \"5 hours 37 mins\"\r\n     *  \t\t},\r\n     *  \t\tfare: undefined,\r\n     *  \t\ttimestamp: 1456795956380\r\n     *  \t}\r\n     *  ]\r\n     */\r\n    static getDistanceMatrix(options, callback) {\r\n        checkGoogleKey();\r\n\r\n        let key = geolocator._.config.google.key;\r\n        geolocator.ensureGoogleLoaded(key, err => {\r\n            if (err) {\r\n                throw new GeoError(GeoError.Code.GOOGLE_API_FAILED, String(err.message || err));\r\n            }\r\n\r\n            let o = options.origins || options.origin || options.from,\r\n                d = options.destinations || options.destination || options.to;\r\n            if (!utils.isPlainObject(options) || invalidOriginOrDest(o) || invalidOriginOrDest(d)) {\r\n                throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\r\n            }\r\n            options.origins = geoHelper.toPointList(o);\r\n            options.destinations = geoHelper.toPointList(d);\r\n\r\n            options = utils.extend({\r\n                travelMode: google.maps.TravelMode.DRIVING,\r\n                avoidFerries: undefined,\r\n                avoidHighways: undefined,\r\n                avoidTolls: undefined,\r\n                unitSystem: google.maps.UnitSystem.METRIC\r\n            }, options);\r\n\r\n            let service = new google.maps.DistanceMatrixService();\r\n            service.getDistanceMatrix(options, (response, status) => {\r\n                let err = null;\r\n                if (status !== google.maps.DistanceMatrixStatus.OK) {\r\n                    err = GeoError.fromResponse(status)\r\n                        || GeoError.fromResponse(response);\r\n                    response = null;\r\n                } else {\r\n                    response = options.raw ? response : geoHelper.formatDistanceResults(response);\r\n                }\r\n                callback(err, response);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  Calculates the distance between two geographic points.\r\n     *\r\n     *  @param {Object} options\r\n     *         Calculation and display options.\r\n     *      @param {Object} options.from\r\n     *             Object containing the `latitude` and `longitude` of original\r\n     *             location.\r\n     *      @param {Object} options.to\r\n     *             Object containing the `latitude` and `longitude` of destination.\r\n     *      @param {String} [options.formula=\"haversine\"]\r\n     *             The algorithm or formula to calculate the distance.\r\n     *             See {@link #geolocator.DistanceFormula|`geolocator.DistanceFormula` enumeration}.\r\n     *      @param {Number} [options.unitSystem=0]\r\n     *             Preferred unit system to use when displaying distance.\r\n     *             See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}.\r\n     *\r\n     *  @returns {Number} - The calculated distance.\r\n     *\r\n     *  @example\r\n     *  // Calculate distance from London to Paris.\r\n     *  var result = geolocator.calcDistance({\r\n     *      from: {\r\n     *          latitude: 51.5085300,\r\n     *          longitude: -0.1257400\r\n     *      },\r\n     *      to: {\r\n     *          latitude: 48.8534100,\r\n     *          longitude: 2.3488000\r\n     *      },\r\n     *      formula: geolocator.DistanceFormula.HAVERSINE,\r\n     *      unitSystem: geolocator.UnitSystem.METRIC\r\n     *  });\r\n     *  // result: 366.41656039126093 (kilometers)\r\n     */\r\n    static calcDistance(options) {\r\n        options = utils.extend({\r\n            formula: geolocator.DistanceFormula.HAVERSINE,\r\n            unitSystem: geolocator.UnitSystem.METRIC\r\n        }, options);\r\n\r\n        let from = options.from,\r\n            to = options.to,\r\n            radius = options.unitSystem === geolocator.UnitSystem.METRIC\r\n                ? EARTH_RADIUS_KM : EARTH_RADIUS_MI;\r\n\r\n        if (options.formula === geolocator.DistanceFormula.HAVERSINE) {\r\n            let dLat = geolocator.degToRad(to.latitude - from.latitude),\r\n                dLng = geolocator.degToRad(to.longitude - from.longitude),\r\n                a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                    Math.cos(geolocator.degToRad(from.latitude)) *\r\n                    Math.cos(geolocator.degToRad(to.longitude)) *\r\n                    Math.sin(dLng / 2) * Math.sin(dLng / 2),\r\n                c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            return radius * c;\r\n        }\r\n        // geolocator.DistanceFormula.PYTHAGOREAN\r\n        let latA = geolocator.degToRad(from.latitude),\r\n            latB = geolocator.degToRad(to.latitude),\r\n            lngA = geolocator.degToRad(from.longitude),\r\n            lngB = geolocator.degToRad(to.longitude),\r\n            x = (lngB - lngA) * Math.cos((latA + latB) / 2),\r\n            y = (latB - latA);\r\n        return Math.sqrt(x * x + y * y) * radius;\r\n    }\r\n\r\n    /**\r\n     *  Gets the current public IP of the client.\r\n     *\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the request completes, in\r\n     *         the following signature: `function (err, result) { ... }`\r\n     *\r\n     *  @returns {void}\r\n     *\r\n     *  @example\r\n     *  geolocator.getIP(function (err, result) {\r\n     *      console.log(err || result);\r\n     *  });\r\n     *\r\n     *  @example\r\n     *  // result:\r\n     *  {\r\n     *      ip: \"176.232.71.155\",\r\n     *      timestamp: 1457573683427\r\n     *  }\r\n     */\r\n    static getIP(callback) {\r\n        let conf = geolocator._.config;\r\n\r\n        // ipify.org supports CORS, so we'll use XMLHttpRequest instead of a\r\n        // JSONP request.\r\n        let opts = {\r\n            url: utils.setProtocol(enums.URL.IP, conf.https),\r\n            async: true\r\n        };\r\n        return fetch.get(opts, (err, xhr) => {\r\n            const response = xhr.responseText;\r\n            if (err) {\r\n                return callback(GeoError.create(err), null);\r\n            }\r\n            if (!response) {\r\n                err = new GeoError(GeoError.Code.INVALID_RESPONSE);\r\n                return callback(err, null);\r\n            }\r\n            callback(null, {\r\n                ip: response,\r\n                timestamp: utils.time()\r\n            });\r\n        });\r\n        // let jsonpOpts = {\r\n        //     url: utils.setProtocol(enums.URL.IP, conf.https),\r\n        //     async: true,\r\n        //     clean: true,\r\n        //     params: {\r\n        //         format: 'jsonp'\r\n        //     },\r\n        //     callbackParam: 'callback',\r\n        //     rootName: 'geolocator._.cb'\r\n        // };\r\n        // return fetch.jsonp(jsonpOpts, (err, response) => {\r\n        //     if (err) {\r\n        //         return callback(GeoError.create(err), null);\r\n        //     }\r\n        //     if (!response) {\r\n        //         err = new GeoError(GeoError.Code.INVALID_RESPONSE);\r\n        //         return callback(err, null);\r\n        //     }\r\n        //     if (typeof response === 'object') response.timestamp = utils.time();\r\n        //     callback(null, response);\r\n        // });\r\n    }\r\n\r\n    /**\r\n     *  Ensures Google Maps API is loaded. If not, this will load all of the\r\n     *  main Javascript objects and symbols for use in the Maps API.\r\n     *\r\n     *  Note that, Google Maps API is loaded only when needed. For example,\r\n     *  the DistanceMatrix API does not support Web Service requests and\r\n     *  requires this API to be loaded. However, the TimeZone API requests are\r\n     *  made throught the Web Service without requiring a `google` object\r\n     *  within DOM.\r\n     *\r\n     *  Also note that this will not re-load the API if `google.maps` object\r\n     *  already exists. In this case, the `callback` is still executed and\r\n     *  no errors are passed.\r\n     *\r\n     *  You can use the following overload to omit the `key` argument altogether:\r\n     *\r\n     *  `geolocator.ensureGoogleLoaded(callback)`\r\n     *\r\n     *  @param {String} [key]\r\n     *         Google API key.\r\n     *  @param {Function} callback\r\n     *         Callback function to be executed when the operation ends.\r\n     *\r\n     *  @returns {void}\r\n     *\r\n     *  @example\r\n     *  geolocator.ensureGoogleLoaded(function (err) {\r\n     *      if (err) return;\r\n     *      console.log('google' in window); // true\r\n     *  });\r\n     */\r\n    static ensureGoogleLoaded(key, callback) {\r\n        let k;\r\n        if (utils.isFunction(key)) {\r\n            callback = key;\r\n        } else {\r\n            k = key;\r\n        }\r\n        if (!geolocator.isGoogleLoaded()) {\r\n            let jsonpOpts = {\r\n                url: enums.URL.GOOGLE_MAPS_API,\r\n                async: true,\r\n                callbackParam: 'callback',\r\n                params: {\r\n                    key: k || ''\r\n                    // callback: ''\r\n                },\r\n                rootName: 'geolocator._.cb'\r\n            };\r\n            return fetch.jsonp(jsonpOpts, callback);\r\n        }\r\n        callback();\r\n    }\r\n\r\n    /**\r\n     *  Checks whether the Google Maps API is loaded.\r\n     *\r\n     *  @returns {Boolean} - Returns `true` if already loaded.\r\n     */\r\n    static isGoogleLoaded() {\r\n        return ('google' in window) && google.maps;\r\n    }\r\n\r\n    /**\r\n     *  Checks whether the type of the given object is an HTML5 `PositionError`.\r\n     *\r\n     *  @param {*} obj - Object to be checked.\r\n     *  @return {Boolean}\r\n     */\r\n    static isPositionError(obj) {\r\n        return utils.isPositionError(obj);\r\n    }\r\n\r\n    /**\r\n     *  Checks whether the given value is an instance of `GeoError`.\r\n     *\r\n     *  @param {*} obj - Object to be checked.\r\n     *  @return {Boolean}\r\n     */\r\n    static isGeoError(obj) {\r\n        return GeoError.isGeoError(obj);\r\n    }\r\n\r\n    /**\r\n     *  Checks whether HTML5 Geolocation API is supported.\r\n     *\r\n     *  @return {Boolean}\r\n     */\r\n    static isGeolocationSupported() {\r\n        return navigator && ('geolocation' in navigator);\r\n    }\r\n\r\n    /**\r\n     *  Converts kilometers to miles.\r\n     *\r\n     *  @param {Number} km - Kilometers to be converted.\r\n     *  @returns {Number} - Miles.\r\n     */\r\n    static kmToMi(km) {\r\n        return km * 0.621371;\r\n    }\r\n\r\n    /**\r\n     *  Converts miles to kilometers.\r\n     *\r\n     *  @param {Number} mi - Miles to be converted.\r\n     *  @returns {Number} - Kilometers.\r\n     */\r\n    static miToKm(mi) {\r\n        return mi / 0.621371;\r\n    }\r\n\r\n    /**\r\n     *  Converts degrees to radians.\r\n     *\r\n     *  @param {Number} deg - Degrees to be converted.\r\n     *  @returns {Number} - Radians.\r\n     */\r\n    static degToRad(degrees) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n\r\n    /**\r\n     *  Converts radians to degrees.\r\n     *\r\n     *  @param {Number} rad - Radians to be converted.\r\n     *  @returns {Number} - Degrees.\r\n     */\r\n    static radToDeg(radians) {\r\n        return radians * (180 / Math.PI);\r\n    }\r\n\r\n    /**\r\n     *  Converts decimal coordinates (either lat or lng) to degrees, minutes, seconds.\r\n     *\r\n     *  @param {Number} dec\r\n     *         Decimals to be converted.\r\n     *  @param {Boolean} [isLng=false]\r\n     *         Indicates whether the given decimals is longitude.\r\n     *\r\n     *  @returns {String} - Degrees, minutes, seconds.\r\n     */\r\n    static decToDegMinSec(dec, isLng = false) {\r\n        // Degrees Latitude must be in the range of -90. to 90.\r\n        // Degrees Longitude must be in the range of -180 to 180.\r\n        // +Latitude is North, -Latitude is South\r\n        // +Longitude is East, -Longitude is West\r\n        let sign = dec < 0 ? -1 : 1,\r\n            sn = dec < 0 ? 'S' : 'N',\r\n            we = dec < 0 ? 'W' : 'E',\r\n            nsew = !isLng ? sn : we,\r\n            absValue = Math.abs(Math.round(dec * 1000000.0));\r\n        return ((Math.floor(absValue / 1000000) * sign) + '° ' + Math.floor(((absValue / 1000000) - Math.floor(absValue / 1000000)) * 60) + '\\' ' +\r\n                (Math.floor(((((absValue / 1000000) - Math.floor(absValue / 1000000)) * 60) - Math.floor(((absValue / 1000000) - Math.floor(absValue / 1000000)) * 60)) * 100000) * 60 / 100000) + '\" ') + nsew;\r\n    }\r\n\r\n}\r\n\r\n// ---------------------------\r\n// HELPER METHODS\r\n// ---------------------------\r\n\r\n/**\r\n *  Used with distance matrix calls.\r\n *  @private\r\n */\r\nfunction invalidOriginOrDest(value) {\r\n    return !utils.isString(value)\r\n        && !utils.isArray(value)\r\n        && !utils.isPlainObject(value);\r\n}\r\n\r\n/**\r\n *  Check if XHR response is an error response and returns a `GeoError`.\r\n *  If not, returns the parsed response.\r\n *  @private\r\n *\r\n *  @param {Error} err\r\n *         XHR error.\r\n *  @param {Object} xhr\r\n *         XHR object to be checked.\r\n *\r\n *  @returns {GeoError|Object}\r\n */\r\nfunction getXHRResponse(err, xhr) {\r\n    if (err) return GeoError.create(err);\r\n    if (!xhr) return new GeoError(GeoError.Code.REQUEST_FAILED);\r\n    let response = utils.safeJsonParse(xhr.responseText);\r\n    // Check if XHR response is an error response.\r\n    // return response if not.\r\n    return GeoError.fromResponse(response) || response;\r\n}\r\n\r\n/**\r\n *  Checks the given options and determines if Google key is required.\r\n *  Throws if key is required but not set or valid.\r\n *  @private\r\n *\r\n *  @param {Object} [options]\r\n *         Options to be checked. If `undefined`, directly checks Googke key.\r\n */\r\nfunction checkGoogleKey(options) {\r\n    if (!options || (options.addressLookup || options.timezone || options.map || options.staticMap)) {\r\n        if (!geolocator._.config.google.key) {\r\n            throw new GeoError(GeoError.Code.GOOGLE_KEY_INVALID, 'A Google API key is required but it\\'s not set or valid.');\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *  Checks and adds necessary properties to map options from the given location\r\n *  result object. This is used with methods that support `map` option; to\r\n *  create a map from the result coordinates; such as locate() method.\r\n *  @private\r\n *\r\n *  @param {Object|String} options\r\n *         Original options object.\r\n *  @param {Object} location\r\n *         Location result object.\r\n *\r\n *  @returns {Object} - Final map options object.\r\n */\r\nfunction getMapOpts(mapOptions, location) {\r\n    if (utils.isObject(mapOptions)) {\r\n        mapOptions.center = location.coords;\r\n    } else {\r\n        mapOptions = {\r\n            element: mapOptions,\r\n            center: location.coords\r\n        };\r\n    }\r\n    // this will enable infoWindow\r\n    if (location.formattedAddress) {\r\n        mapOptions.title = location.formattedAddress;\r\n    }\r\n    // if location has accuracy, (and zoom is not set) we can zoom in a bit more\r\n    if (!mapOptions.zoom\r\n            && location.coords\r\n            && utils.isNumber(location.coords.accuracy)\r\n            && location.coords.accuracy < 1500) {\r\n        mapOptions.zoom = 15;\r\n    }\r\n    return mapOptions;\r\n}\r\n\r\n/**\r\n *  Checks the HTMLElement to see whether a previous map and related objects\r\n *  (marker, infoWindow) are created for it; by checking our private property\r\n *  `_geolocatorMapData`. If there is a map, this does not re-create it (which\r\n *  will break the map) but only re-adjust center, zoom and re-create the marker\r\n *  if needed. We use this approach bec. Google maps has no feature to destroy\r\n *  a map. This is considered a bug by Google developers.\r\n *  @private\r\n *\r\n *  @param {Object} options\r\n *         Options for creating a map.\r\n */\r\nfunction configCreateMap(options) {\r\n    let elem = options.element,\r\n        // when geolocator creates a map, it will set a `_geolocatorMapData`\r\n        // property on the element. So we can use this map instance later,\r\n        // when the same HTMLElement is passed to create a map. So check if\r\n        // we have it here.\r\n        mapData = elem._geolocatorMapData,\r\n        map = (mapData && mapData.instance) || null,\r\n        marker = (mapData && mapData.marker) || null,\r\n        infoWindow = (mapData && mapData.infoWindow) || null,\r\n        center = new google.maps.LatLng(options.center.latitude, options.center.longitude),\r\n        mapOptions = {\r\n            mapTypeId: options.mapTypeId,\r\n            center: center,\r\n            zoom: options.zoom,\r\n            styles: options.styles || null\r\n        };\r\n\r\n    // if we have a map, we'll just configure it. otherwise, we'll create\r\n    // one.\r\n    if (map) {\r\n        map.setOptions(mapOptions);\r\n    } else {\r\n        map = new google.maps.Map(options.element, mapOptions);\r\n    }\r\n\r\n    // destroy marker and infoWindow if previously created for this element.\r\n    if (infoWindow) infoWindow = null;\r\n    if (marker && marker instanceof google.maps.Marker) {\r\n        google.maps.event.clearInstanceListeners(marker);\r\n        marker.setMap(null);\r\n        marker = null;\r\n    }\r\n\r\n    // check the new options to see if we need to re-create a marker for\r\n    // this.\r\n    if (options.marker) {\r\n        marker = new google.maps.Marker({\r\n            position: mapOptions.center,\r\n            map: map\r\n        });\r\n        if (options.title) {\r\n            infoWindow = new google.maps.InfoWindow();\r\n            infoWindow.setContent(options.title);\r\n            // infoWindow.open(map, marker);\r\n            google.maps.event.addListener(marker, 'click', () => {\r\n                infoWindow.open(map, marker);\r\n            });\r\n        }\r\n    }\r\n\r\n    mapData = {\r\n        element: elem,\r\n        instance: map,\r\n        marker: marker,\r\n        infoWindow: infoWindow,\r\n        options: mapOptions\r\n    };\r\n    // set the reference on the element for later use, if needed.\r\n    elem._geolocatorMapData = mapData;\r\n    return mapData;\r\n}\r\n\r\n/**\r\n *  Sets the `flag` and `staticMap` (if enabled) property of the given location.\r\n *  @private\r\n *\r\n *  @param {Object} location - Fetched location result.\r\n *  @param {Object} options - initial options.\r\n */\r\nfunction setLocationURLs(location, options) {\r\n    if (!location || !location.address) return;\r\n    let cc,\r\n        address = location.address;\r\n    if (utils.isString(address.countryCode) && address.countryCode.length === 2) {\r\n        cc = address.countryCode;\r\n    } else if (utils.isString(address.country) && address.country.length === 2) {\r\n        cc = address.country;\r\n    }\r\n    if (!cc) return;\r\n    location.flag = enums.URL.FLAG + cc.toLowerCase() + '.svg';\r\n    if (options.staticMap) {\r\n        let opts = utils.isPlainObject(options.staticMap)\r\n            ? utils.clone(options.staticMap)\r\n            : {};\r\n        opts.center = location.coords;\r\n        location.staticMap = geolocator.getStaticMap(opts);\r\n    }\r\n}\r\n\r\n/**\r\n *  Nests `createMap` callback within the given callback.\r\n *  @private\r\n *\r\n *  @param {Object} options\r\n *         Method options.\r\n *  @param {Function} callback\r\n *         Parent callback.\r\n *\r\n *  @returns {Function} - Nested callback.\r\n */\r\nfunction callbackMap(options, callback) {\r\n    return function cb(err, location) {\r\n        if (err) return callback(GeoError.create(err), null);\r\n        setLocationURLs(location, options);\r\n        if (!options.map) return callback(null, location);\r\n        options.map = getMapOpts(options.map, location);\r\n        geolocator.createMap(options.map, (error, map) => {\r\n            if (error) return callback(error, null);\r\n            location.map = map;\r\n            return callback(null, location);\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n *  Sends a geocode or reverse-geocode request with the given options.\r\n *  @private\r\n *\r\n *  @param {Boolean} reverse\r\n *         Whether to send reverse-geocode request.\r\n *  @param {Object} options\r\n *         Geocode options.\r\n *  @param {Function} callback\r\n *         Callback to be nested and executed with map callback.\r\n */\r\nfunction geocode(reverse, options, callback) {\r\n    checkGoogleKey();\r\n    geoHelper.geocode(\r\n        reverse,\r\n        geolocator._.config,\r\n        options,\r\n        callbackMap(options, callback)\r\n    );\r\n}\r\n\r\n/**\r\n *  Runs both an address and a timezone look-up for the given location.\r\n *  @private\r\n *\r\n *  @param {Object} location\r\n *         Location object.\r\n *  @param {Object} options\r\n *         Method options.\r\n *  @param {Function} callback\r\n *         Parent callback.\r\n */\r\nfunction fetchAddressAndTimezone(location, options, callback) {\r\n    let loc = utils.clone(location, { own: false });\r\n    if (!options.addressLookup && !options.timezone) {\r\n        return callback(null, loc);\r\n    }\r\n    function getTZ(cb) {\r\n        geolocator.getTimeZone(loc.coords, (err, timezone) => {\r\n            if (err) {\r\n                return cb(err, null);\r\n            }\r\n            delete timezone.timestamp;\r\n            loc.timezone = timezone;\r\n            loc.timestamp = utils.time(); // update timestamp\r\n            cb(null, loc);\r\n        });\r\n    }\r\n    if (options.addressLookup) {\r\n        geolocator.reverseGeocode(loc.coords, (err, result) => {\r\n            if (err) return callback(err, null);\r\n            loc = utils.extend({}, result, loc);\r\n            loc.address = result.address;\r\n            loc.timestamp = utils.time(); // update timestamp\r\n            if (!options.timezone) {\r\n                callback(err, loc);\r\n            } else {\r\n                getTZ(callback);\r\n            }\r\n        });\r\n    } else if (options.timezone) {\r\n        getTZ(callback);\r\n    } else {\r\n        callback(null, loc);\r\n    }\r\n}\r\n\r\n/**\r\n *  Gets the position with better accuracy.\r\n *  See https://github.com/gwilson/getAccurateCurrentPosition#background\r\n *  @private\r\n *\r\n *  @param {Object} options\r\n *         Locate options.\r\n *  @param {Function} onPositionReceived\r\n *         Success callback.\r\n *  @param {Function} onPositionError\r\n *         Error callback.\r\n */\r\nfunction locateAccurate(options, onPositionReceived, onPositionError) {\r\n    let loc,\r\n        watcher,\r\n        onProgress = !utils.isFunction(options.onProgress)\r\n            ? utils.noop\r\n            : options.onProgress;\r\n\r\n    function complete() {\r\n        watcher = null;\r\n        if (!loc) {\r\n            onPositionError(new GeoError(GeoError.Code.POSITION_UNAVAILABLE));\r\n        } else {\r\n            onPositionReceived(loc);\r\n        }\r\n    }\r\n\r\n    watcher = geolocator.watch(options, (err, location) => {\r\n        if (!watcher) return;\r\n        if (err) {\r\n            return watcher.clear(() => {\r\n                onPositionError(err);\r\n            });\r\n        }\r\n        loc = location;\r\n        // ignore the first event if not the only result; for more accuracy.\r\n        if (watcher.cycle > 1 && loc.coords.accuracy <= options.desiredAccuracy) {\r\n            watcher.clear(complete);\r\n        } else {\r\n            onProgress(loc);\r\n        }\r\n    });\r\n    if (watcher) watcher.clear(options.maximumWait + 100, complete);\r\n}\r\n\r\nfunction getStyles(options) {\r\n    let conf = geolocator._.config;\r\n    return !utils.isFilledArray(options.styles)\r\n        ? (utils.isFilledArray(conf.google.styles) ? conf.google.styles : null)\r\n        : options.styles;\r\n}\r\n\r\n// ---------------------------\r\n// INITIALIZE\r\n// ---------------------------\r\n\r\n/**\r\n *  @private\r\n *  @type {Object}\r\n */\r\ngeolocator._ = {\r\n    config: utils.extend({}, defaultConfig),\r\n    // Storage for global callbacks.\r\n    cb: {}\r\n};\r\n\r\n// setting default Geo-IP source\r\n\r\ngeolocator.setGeoIPSource({\r\n    provider: 'geojs.io',\r\n    url: 'https://get.geojs.io/v1/ip/geo.json',\r\n    xhr: true,\r\n    schema: {\r\n        ip: 'ip',\r\n        coords: {\r\n            latitude: 'latitude',\r\n            longitude: 'longitude'\r\n        },\r\n        address: {\r\n            city: 'city',\r\n            state: 'region',\r\n            stateCode: '',\r\n            postalCode: '',\r\n            countryCode: 'country_code',\r\n            country: 'country',\r\n            region: 'region'\r\n        },\r\n        timezone: {\r\n            id: 'timezone'\r\n        }\r\n    }\r\n});\r\n\r\n// ---------------------------\r\n// EXPORT\r\n// ---------------------------\r\n\r\nexport { geolocator };\r\n\r\n// ---------------------------\r\n// ADDITIONAL DOCUMENTATION\r\n// ---------------------------\r\n\r\n/**\r\n *  `Coordinates` inner type that specifies the geographic position of the\r\n *  device. The position is expressed as a set of geographic coordinates\r\n *  together with information about heading and speed.\r\n *\r\n *  This is generally returned as part of the\r\n *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\r\n *\r\n *  @typedef geolocator~Coordinates\r\n *  @type Object\r\n *\r\n *  @property {Number} latitude\r\n *         Specifies the latitude estimate in decimal degrees. The value\r\n *         range is [-90.00, +90.00].\r\n *  @property {Number} longitude\r\n *         Specifies the longitude estimate in decimal degrees. The value\r\n *         range is [-180.00, +180.00].\r\n *  @property {Number} altitude\r\n *         Specifies the altitude estimate in meters above the WGS 84\r\n *         ellipsoid.\r\n *  @property {Number} accuracy\r\n *         Specifies the accuracy of the latitude and longitude estimates in\r\n *         meters.\r\n *  @property {Number} altitudeAccuracy\r\n *         Specifies the accuracy of the altitude estimate in meters.\r\n *  @property {Number} heading\r\n *         Specifies the device's current direction of movement in degrees\r\n *         counting clockwise relative to true north.\r\n *  @property {Number} speed\r\n *         Specifies the device's current ground speed in meters per second.\r\n */\r\n\r\n/**\r\n *\t`Address` inner type that specifies the address of the fetched location.\r\n *\tThe address is expressed as a set of political and locality components.\r\n *\r\n *  This is generally returned as part of the\r\n *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\r\n *\r\n *  @typedef geolocator~Address\r\n *  @type Object\r\n *\r\n *  @property {String} commonName\r\n *         Indicates a point of interest, a premise or colloquial area name for\r\n *         the fetched location, if any.\r\n *  @property {String} streetNumber\r\n *         Indicates the precise street number of the fetched location, if any.\r\n *  @property {String} street\r\n *         Indicates the street name of the fetched location, if any.\r\n *  @property {String} route\r\n *         Indicates the route name of the fetched location, if any.\r\n *  @property {String} neighborhood\r\n *         Indicates the neighborhood name of the fetched location, if any.\r\n *  @property {String} town\r\n *         Indictes the town of the fetched location, if any.\r\n *  @property {String} city\r\n *         Indicates the city of the fetched location.\r\n *  @property {String} region\r\n *         Indicates the political region name of the fetched location, if any.\r\n *  @property {String} postalCode\r\n *         Indicates the postal code of the fetched location, if any.\r\n *  @property {String} state\r\n *         Indicates the state of the fetched location, if any.\r\n *  @property {String} stateCode\r\n *         Indicates the state code of the fetched location, if any.\r\n *  @property {String} country\r\n *         Indicates the national political entity of the fetched location.\r\n *  @property {String} countryCode\r\n *         Indicates the ISO alpha-2 country code of the fetched location.\r\n */\r\n\r\n/**\r\n *\t`TimeZone` inner type that specifies time offset data for the fetched\r\n *\tlocation on the surface of the earth.\r\n *\r\n *  This is generally returned as part of the\r\n *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\r\n *\r\n *  @typedef geolocator~TimeZone\r\n *  @type Object\r\n *\r\n *  @property {String} id\r\n *         The ID of the time zone, such as `\"America/Los_Angeles\"` or\r\n *         `\"Australia/Sydney\"`. These IDs are defined in the\r\n *         {@link http://www.iana.org/time-zones|IANA Time Zone Database},\r\n *         which is also available in searchable format in Wikipedia's\r\n *         {@link http://en.wikipedia.org/wiki/List_of_tz_database_time_zones|List of tz database time zones}.\r\n *  @property {String} name\r\n *         The long form name of the time zone. This field will be localized if\r\n *         the Geolocator `language` is configured. e.g. `\"Pacific Daylight Time\"`\r\n *         or `\"Australian Eastern Daylight Time\"`.\r\n *  @property {String} abbr\r\n *         The abbreviation of the time zone.\r\n *  @property {Number} dstOffset\r\n *         The offset for daylight-savings time in seconds. This will be zero\r\n *         if the time zone is not in Daylight Savings Time during the specified\r\n *         timestamp.\r\n *  @property {Number} rawOffset\r\n *         The offset from UTC (in seconds) for the given location. This does\r\n *         not take into effect daylight savings.\r\n */\r\n\r\n/**\r\n *\t`MapData` inner type that provides references to the components of a\r\n *\tcreated Google Maps `Map` and the containing DOM element.\r\n *\r\n *  This is generally returned as part of the\r\n *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\r\n *\r\n *  @typedef geolocator~MapData\r\n *  @type Object\r\n *\r\n *  @property {HTMLElement} element\r\n *         DOM element which a (Google) map is created within.\r\n *  @property {google.maps.Map} instance\r\n *         Instance of a Google Maps `Map` object.\r\n *  @property {google.maps.Marker} marker\r\n *         Instance of a Google Maps `Marker` object, if any.\r\n *  @property {google.maps.InfoWindow} infoWindow\r\n *         Instance of a Google Maps `InfoWindow` object, if any.\r\n *  @property {Object} options\r\n *         Arbitrary object of applied map options.\r\n */\r\n\r\n/**\r\n *\t`Location` inner type that specifies geographic coordinates, address and\r\n *\ttime zone information for the fetched location.\r\n *\r\n *  This result object is passed to the callbacks of the corresponding\r\n *  asynchronous Geolocator methods (such as `.locate()` method), as the second\r\n *  argument. The contents of this object will differ for various  Geolocator\r\n *  methods, depending on the configured method options.\r\n *\r\n *  @typedef geolocator~Location\r\n *  @type Object\r\n *\r\n *  @property {Coordinates} coords\r\n *         Specifies the geographic location of the device. The location is\r\n *         expressed as a set of geographic coordinates together with\r\n *         information about heading and speed.\r\n *         See {@link #geolocator~Coordinates|`geolocator~Coordinates` type}\r\n *         for details.\r\n *  @property {Address} address\r\n *         Specifies the address of the fetched location. The address is\r\n *         expressed as a set of political and locality components.\r\n *         This property might be `undefined` if `addressLookup` option is not\r\n *         enabled for the corresponding method.\r\n *         See {@link #geolocator~Address|`geolocator~Address` type}\r\n *         for details.\r\n *  @property {String} formattedAddress\r\n *         The human-readable address of this location. Often this address is\r\n *         equivalent to the \"postal address,\" which sometimes differs from\r\n *         country to country.\r\n *  @property {Boolean} targetReached\r\n *         Specifies whether the defined target coordinates is reached.\r\n *         This property is only available for\r\n *         {@link #geolocator.watch|`geolocator.watch()`} method when `target`\r\n *         option is defined.\r\n *  @property {String} type\r\n *         Type of the location. See\r\n *         {@link #geolcoator.LocationType|`geolcoator.LocationType` enumeration}\r\n *         for details.\r\n *  @property {String} placeId\r\n *         A unique identifier that can be used with other Google APIs.\r\n *  @property {String} flag\r\n *         URL of the country flag image, in SVG format. This property exists\r\n *         only if address information is available.\r\n *  @property {TimeZone} timezone\r\n *         Specifies time offset data for the fetched location on the surface of\r\n *         the earth. See {@link #geolocator~TimeZone|`geolocator~TimeZone` type}\r\n *         for details.\r\n *  @property {MapData} map\r\n *         Provides references to the components of a created Google Maps `Map`\r\n *         and the containing DOM element. See\r\n *         {@link #geolocator~MapData|`geolocator~MapData` type} for details.\r\n *  @property {String} staticMap\r\n *         URL of a static Google map image, for the location.\r\n *  @property {Number} timestamp\r\n *         Specifies the time when the location information was retrieved and\r\n *         the `Location` object created.\r\n */\r\n\r\n/**\r\n *  `MapOptions` inner type that specifies options for the map to be created.\r\n *\r\n *  @typedef geolocator~MapOptions\r\n *  @type Object\r\n *\r\n *  @property {String|HTMLElement|Map} element\r\n *         Either the ID of a DOM element or the element itself;\r\n *         which the map will be created within; or a previously created\r\n *         `google.maps.Map` instance. If a map instance is set, this\r\n *         only will apply the options without re-creating it.\r\n *  @property {Object} center\r\n *         Center coordinates for the map to be created.\r\n *      @property {Number} center.latitude\r\n *             Latitude of the center point coordinates.\r\n *      @property {Number} center.longitude\r\n *             Longitude of the center point coordinates.\r\n *  @property {String} mapTypeId\r\n *         Type of the map to be created.\r\n *         See {@link #geolocator.MapTypeId|`geolocator.MapTypeId` enumeration}\r\n *         for possible values.\r\n *  @property {String} title\r\n *         Title text to be displayed within an `InfoWindow`, when the\r\n *         marker is clicked. This only take effect if `marker` is\r\n *         enabled.\r\n *  @property {Boolean} marker\r\n *         Whether to place a marker at the given coordinates.\r\n *         If `title` is set, an `InfoWindow` will be opened when the\r\n *         marker is clicked.\r\n *  @property {Number} zoom\r\n *             Zoom level to be set for the map.\r\n */\r\n","// we don't mix import and module.exports in same file, so using require here.\r\nconst geolocator = require('./core/geolocator').geolocator;\r\n\r\n// See https://github.com/onury/geolocator/issues/42\r\nif (typeof window !== 'undefined'\r\n        && typeof window.geolocator === 'undefined') {\r\n    window.geolocator = geolocator;\r\n}\r\n\r\n// export default geolocator;\r\n// http://stackoverflow.com/a/33683495/112731\r\nmodule.exports = geolocator;\r\n"],"sourceRoot":""}